
11_DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004020  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080041c0  080041c0  000051c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004284  08004284  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004284  08004284  00005284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800428c  0800428c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800428c  0800428c  0000528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004290  08004290  00005290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004294  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000068  080042fc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080042fc  00006270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d25f  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002347  00000000  00000000  000132f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00015640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000941  00000000  00000000  00016250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b0c  00000000  00000000  00016b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f30d  00000000  00000000  0002e69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fca8  00000000  00000000  0003d9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd652  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003848  00000000  00000000  000cd698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d0ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080041a8 	.word	0x080041a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080041a8 	.word	0x080041a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <delay_us>:
#include "delay.h"



void delay_us(uint16_t us)   //마이크로 비트
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim11, 0);
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <delay_us+0x30>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	@ 0x24

	while((__HAL_TIM_GET_COUNTER(&htim11)) < us);
 80005be:	bf00      	nop
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <delay_us+0x30>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3f9      	bcc.n	80005c0 <delay_us+0x14>

}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000090 	.word	0x20000090

080005e0 <dht11Init>:



// 11 초기화
void dht11Init(DHT11 *dht, GPIO_TypeDef *port, uint16_t pinNumber)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	4613      	mov	r3, r2
 80005ec:	80fb      	strh	r3, [r7, #6]
	// 구조체의 포트와 핀 번호 설정
	dht->port = port;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	601a      	str	r2, [r3, #0]
	dht->pinNumber = pinNumber;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	88fa      	ldrh	r2, [r7, #6]
 80005f8:	809a      	strh	r2, [r3, #4]

}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <dht11GpioMode>:

void dht11GpioMode(DHT11 *dht, uint8_t mode)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b088      	sub	sp, #32
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	460b      	mov	r3, r1
 8000610:	70fb      	strb	r3, [r7, #3]

	GPIO_InitTypeDef GPIO_InitStruct = {0};  //  포트에 대한 구조체 선언 및 초기화
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

	if(mode == OUTPUT)
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d111      	bne.n	800064c <dht11GpioMode+0x46>
	{
		// 아웃풋 설정
		GPIO_InitStruct.Pin = dht->pinNumber;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	889b      	ldrh	r3, [r3, #4]
 800062c:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000636:	2302      	movs	r3, #2
 8000638:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f107 020c 	add.w	r2, r7, #12
 8000642:	4611      	mov	r1, r2
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fed3 	bl	80013f0 <HAL_GPIO_Init>
		HAL_GPIO_Init(dht->port, &GPIO_InitStruct);

	}


}
 800064a:	e013      	b.n	8000674 <dht11GpioMode+0x6e>
	else if(mode == INPUT)
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d110      	bne.n	8000674 <dht11GpioMode+0x6e>
		GPIO_InitStruct.Pin = dht->pinNumber;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	889b      	ldrh	r3, [r3, #4]
 8000656:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000660:	2302      	movs	r3, #2
 8000662:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f107 020c 	add.w	r2, r7, #12
 800066c:	4611      	mov	r1, r2
 800066e:	4618      	mov	r0, r3
 8000670:	f000 febe 	bl	80013f0 <HAL_GPIO_Init>
}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <dht11Read>:


uint8_t dht11Read(DHT11 *dht)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b090      	sub	sp, #64	@ 0x40
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	bool ret = true;
 8000684:	2301      	movs	r3, #1
 8000686:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	uint16_t timeTick = 0;				//시간 측정을 위한 변수 초기화
 800068a:	2300      	movs	r3, #0
 800068c:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint8_t pulse[40] = {0};			//40비트 데이터를 저장 할 배열 및 초기화
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	2228      	movs	r2, #40	@ 0x28
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f002 ff6f 	bl	800357a <memset>

	// 온습도 데이터 변수
	uint8_t humValue1 = 0, humValue2 = 0;			//습도
 800069c:	2300      	movs	r3, #0
 800069e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80006a2:	2300      	movs	r3, #0
 80006a4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t temValue1 = 0, temValue2 = 0;			//온도
 80006a8:	2300      	movs	r3, #0
 80006aa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80006ae:	2300      	movs	r3, #0
 80006b0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t parityValue = 0;						//체크섬
 80006b4:	2300      	movs	r3, #0
 80006b6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	// 타이머 시작
	HAL_TIM_Base_Start(&htim11);
 80006ba:	48a4      	ldr	r0, [pc, #656]	@ (800094c <dht11Read+0x2d0>)
 80006bc:	f001 fd36 	bl	800212c <HAL_TIM_Base_Start>

	// 통신 시작 신호 전송
	dht11GpioMode(dht, OUTPUT);								//GPIO를 출력모드로 설정
 80006c0:	2101      	movs	r1, #1
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff ff9f 	bl	8000606 <dht11GpioMode>
	HAL_GPIO_WritePin(dht->port, dht->pinNumber, 0);		//dht11에 0 전송
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	889b      	ldrh	r3, [r3, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	f001 f828 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_Delay(20);											//시작 신호(LOW) *마진률 생각 할 것
 80006d8:	2014      	movs	r0, #20
 80006da:	f000 fcc1 	bl	8001060 <HAL_Delay>
	HAL_GPIO_WritePin(dht->port, dht->pinNumber, 1);		//dht11에 1 전송
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	889b      	ldrh	r3, [r3, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	f001 f81d 	bl	8001728 <HAL_GPIO_WritePin>
	delay_us(30);											//30us 대기
 80006ee:	201e      	movs	r0, #30
 80006f0:	f7ff ff5c 	bl	80005ac <delay_us>
	dht11GpioMode(dht, INPUT);								//GPIO를 입력모드로 설정
 80006f4:	2100      	movs	r1, #0
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff85 	bl	8000606 <dht11GpioMode>


	// dht11의 응답신호 대기
	__HAL_TIM_SET_COUNTER(&htim11, 0);
 80006fc:	4b93      	ldr	r3, [pc, #588]	@ (800094c <dht11Read+0x2d0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_RESET)		//LOW
 8000704:	e008      	b.n	8000718 <dht11Read+0x9c>
	{
		if(__HAL_TIM_GET_COUNTER(&htim11) > 100)
 8000706:	4b91      	ldr	r3, [pc, #580]	@ (800094c <dht11Read+0x2d0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800070c:	2b64      	cmp	r3, #100	@ 0x64
 800070e:	d903      	bls.n	8000718 <dht11Read+0x9c>
		{
			printf("no LOW signal \n\r");											//타임아웃 오류 출력
 8000710:	488f      	ldr	r0, [pc, #572]	@ (8000950 <dht11Read+0x2d4>)
 8000712:	f002 fedd 	bl	80034d0 <iprintf>
			break;																//타임아웃 오류 났으면 while문 탈출
 8000716:	e00a      	b.n	800072e <dht11Read+0xb2>
	while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_RESET)		//LOW
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	889b      	ldrh	r3, [r3, #4]
 8000720:	4619      	mov	r1, r3
 8000722:	4610      	mov	r0, r2
 8000724:	f000 ffe8 	bl	80016f8 <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0eb      	beq.n	8000706 <dht11Read+0x8a>

		}
	}

	__HAL_TIM_SET_COUNTER(&htim11, 0);
 800072e:	4b87      	ldr	r3, [pc, #540]	@ (800094c <dht11Read+0x2d0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_SET)		//LOW
 8000736:	e008      	b.n	800074a <dht11Read+0xce>
	{

		if(__HAL_TIM_GET_COUNTER(&htim11) > 100)
 8000738:	4b84      	ldr	r3, [pc, #528]	@ (800094c <dht11Read+0x2d0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	2b64      	cmp	r3, #100	@ 0x64
 8000740:	d903      	bls.n	800074a <dht11Read+0xce>
		{
			printf("no High signal \n\r");											//타임아웃 오류 출력
 8000742:	4884      	ldr	r0, [pc, #528]	@ (8000954 <dht11Read+0x2d8>)
 8000744:	f002 fec4 	bl	80034d0 <iprintf>
			break;																//타임아웃 오류 났으면 while문 탈출
 8000748:	e00a      	b.n	8000760 <dht11Read+0xe4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_SET)		//LOW
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	889b      	ldrh	r3, [r3, #4]
 8000752:	4619      	mov	r1, r3
 8000754:	4610      	mov	r0, r2
 8000756:	f000 ffcf 	bl	80016f8 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d0eb      	beq.n	8000738 <dht11Read+0xbc>
		}

	}

	// 데이터 수신
	for(uint8_t i=0; i < 40; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8000766:	e03f      	b.n	80007e8 <dht11Read+0x16c>
	{
		while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_RESET);
 8000768:	bf00      	nop
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	889b      	ldrh	r3, [r3, #4]
 8000772:	4619      	mov	r1, r3
 8000774:	4610      	mov	r0, r2
 8000776:	f000 ffbf 	bl	80016f8 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f4      	beq.n	800076a <dht11Read+0xee>
		__HAL_TIM_SET_COUNTER(&htim11, 0);
 8000780:	4b72      	ldr	r3, [pc, #456]	@ (800094c <dht11Read+0x2d0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	@ 0x24

		while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_SET)
 8000788:	e01e      	b.n	80007c8 <dht11Read+0x14c>
		{
			timeTick = __HAL_TIM_GET_COUNTER(&htim11);						//high 신호길이 측청
 800078a:	4b70      	ldr	r3, [pc, #448]	@ (800094c <dht11Read+0x2d0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000790:	867b      	strh	r3, [r7, #50]	@ 0x32



		if(timeTick > 20 && timeTick <30)
 8000792:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000794:	2b14      	cmp	r3, #20
 8000796:	d90a      	bls.n	80007ae <dht11Read+0x132>
 8000798:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800079a:	2b1d      	cmp	r3, #29
 800079c:	d807      	bhi.n	80007ae <dht11Read+0x132>
		{
			pulse[i] = 0;
 800079e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80007a2:	3340      	adds	r3, #64	@ 0x40
 80007a4:	443b      	add	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	f803 2c38 	strb.w	r2, [r3, #-56]
 80007ac:	e00c      	b.n	80007c8 <dht11Read+0x14c>

		}
		else if(timeTick > 65 && timeTick < 85)
 80007ae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80007b0:	2b41      	cmp	r3, #65	@ 0x41
 80007b2:	d909      	bls.n	80007c8 <dht11Read+0x14c>
 80007b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80007b6:	2b54      	cmp	r3, #84	@ 0x54
 80007b8:	d806      	bhi.n	80007c8 <dht11Read+0x14c>
		{
			pulse[i] = 1;
 80007ba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80007be:	3340      	adds	r3, #64	@ 0x40
 80007c0:	443b      	add	r3, r7
 80007c2:	2201      	movs	r2, #1
 80007c4:	f803 2c38 	strb.w	r2, [r3, #-56]
		while(HAL_GPIO_ReadPin(dht->port, dht->pinNumber) == GPIO_PIN_SET)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	889b      	ldrh	r3, [r3, #4]
 80007d0:	4619      	mov	r1, r3
 80007d2:	4610      	mov	r0, r2
 80007d4:	f000 ff90 	bl	80016f8 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d0d5      	beq.n	800078a <dht11Read+0x10e>
	for(uint8_t i=0; i < 40; i++)
 80007de:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80007e2:	3301      	adds	r3, #1
 80007e4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80007e8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80007ec:	2b27      	cmp	r3, #39	@ 0x27
 80007ee:	d9bb      	bls.n	8000768 <dht11Read+0xec>
		}
	}


	// 타이머 정지
	HAL_TIM_Base_Stop(&htim11);
 80007f0:	4856      	ldr	r0, [pc, #344]	@ (800094c <dht11Read+0x2d0>)
 80007f2:	f001 fcf5 	bl	80021e0 <HAL_TIM_Base_Stop>

	// 배열에 저장된 데이터 처리
	for(uint8_t i=0; i<8; i++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80007fc:	e011      	b.n	8000822 <dht11Read+0x1a6>
	{
		humValue1 = (humValue1 << 1) + pulse[i];  			//습도 상위 8비트
 80007fe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	b2da      	uxtb	r2, r3
 8000806:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800080a:	3340      	adds	r3, #64	@ 0x40
 800080c:	443b      	add	r3, r7
 800080e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000812:	4413      	add	r3, r2
 8000814:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t i=0; i<8; i++)
 8000818:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800081c:	3301      	adds	r3, #1
 800081e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8000822:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000826:	2b07      	cmp	r3, #7
 8000828:	d9e9      	bls.n	80007fe <dht11Read+0x182>
	}
	for(uint8_t i=8; i<16; i++)
 800082a:	2308      	movs	r3, #8
 800082c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000830:	e011      	b.n	8000856 <dht11Read+0x1da>
	{
		humValue2 = (humValue2 << 1) + pulse[i];  			//습도 하위 8비트
 8000832:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	b2da      	uxtb	r2, r3
 800083a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800083e:	3340      	adds	r3, #64	@ 0x40
 8000840:	443b      	add	r3, r7
 8000842:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000846:	4413      	add	r3, r2
 8000848:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	for(uint8_t i=8; i<16; i++)
 800084c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000850:	3301      	adds	r3, #1
 8000852:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000856:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800085a:	2b0f      	cmp	r3, #15
 800085c:	d9e9      	bls.n	8000832 <dht11Read+0x1b6>
	}
	for(uint8_t i=8; i<24; i++)	{
 800085e:	2308      	movs	r3, #8
 8000860:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000864:	e011      	b.n	800088a <dht11Read+0x20e>
		temValue1 = (temValue1 << 1) + pulse[i];  			//습도 상위 8비트
 8000866:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	b2da      	uxtb	r2, r3
 800086e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000872:	3340      	adds	r3, #64	@ 0x40
 8000874:	443b      	add	r3, r7
 8000876:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800087a:	4413      	add	r3, r2
 800087c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	for(uint8_t i=8; i<24; i++)	{
 8000880:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000884:	3301      	adds	r3, #1
 8000886:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800088a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800088e:	2b17      	cmp	r3, #23
 8000890:	d9e9      	bls.n	8000866 <dht11Read+0x1ea>
	}
	for(uint8_t i=8; i<32; i++)	{
 8000892:	2308      	movs	r3, #8
 8000894:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8000898:	e011      	b.n	80008be <dht11Read+0x242>
		temValue2 = (temValue2 << 1) + pulse[i];  			//습도 상위 8비트
 800089a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80008a6:	3340      	adds	r3, #64	@ 0x40
 80008a8:	443b      	add	r3, r7
 80008aa:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80008ae:	4413      	add	r3, r2
 80008b0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	for(uint8_t i=8; i<32; i++)	{
 80008b4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80008b8:	3301      	adds	r3, #1
 80008ba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80008be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80008c2:	2b1f      	cmp	r3, #31
 80008c4:	d9e9      	bls.n	800089a <dht11Read+0x21e>
	}
	for(uint8_t i=8; i<40; i++)	{
 80008c6:	2308      	movs	r3, #8
 80008c8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80008cc:	e011      	b.n	80008f2 <dht11Read+0x276>
		parityValue = (parityValue << 1) + pulse[i];  			//습도 상위 8비트
 80008ce:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008da:	3340      	adds	r3, #64	@ 0x40
 80008dc:	443b      	add	r3, r7
 80008de:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80008e2:	4413      	add	r3, r2
 80008e4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	for(uint8_t i=8; i<40; i++)	{
 80008e8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008ec:	3301      	adds	r3, #1
 80008ee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80008f2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008f6:	2b27      	cmp	r3, #39	@ 0x27
 80008f8:	d9e9      	bls.n	80008ce <dht11Read+0x252>
	}


	// 구조체에 온습도 값을 저장
	dht->temperature = temValue1;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8000900:	719a      	strb	r2, [r3, #6]
	dht->humidity = humValue1;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000908:	71da      	strb	r2, [r3, #7]

	// 데이터 무결성 검증
	uint8_t checkSum = humValue1 + humValue2 + temValue1 + temValue2;
 800090a:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800090e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000912:	4413      	add	r3, r2
 8000914:	b2da      	uxtb	r2, r3
 8000916:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800091a:	4413      	add	r3, r2
 800091c:	b2da      	uxtb	r2, r3
 800091e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000922:	4413      	add	r3, r2
 8000924:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	if(checkSum != parityValue)
 8000928:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 800092c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000930:	429a      	cmp	r2, r3
 8000932:	d005      	beq.n	8000940 <dht11Read+0x2c4>
	{
		printf("wrong checkSum value \n\r");
 8000934:	4808      	ldr	r0, [pc, #32]	@ (8000958 <dht11Read+0x2dc>)
 8000936:	f002 fdcb 	bl	80034d0 <iprintf>
		ret = false;
 800093a:	2300      	movs	r3, #0
 800093c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	return ret;
 8000940:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f

}
 8000944:	4618      	mov	r0, r3
 8000946:	3740      	adds	r7, #64	@ 0x40
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000090 	.word	0x20000090
 8000950:	080041c0 	.word	0x080041c0
 8000954:	080041d4 	.word	0x080041d4
 8000958:	080041e8 	.word	0x080041e8

0800095c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <MX_GPIO_Init+0x98>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a1e      	ldr	r2, [pc, #120]	@ (80009f4 <MX_GPIO_Init+0x98>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <MX_GPIO_Init+0x98>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_GPIO_Init+0x98>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <MX_GPIO_Init+0x98>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <MX_GPIO_Init+0x98>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_GPIO_Init+0x98>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <MX_GPIO_Init+0x98>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_GPIO_Init+0x98>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2110      	movs	r1, #16
 80009ca:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <MX_GPIO_Init+0x9c>)
 80009cc:	f000 feac 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009d0:	2310      	movs	r3, #16
 80009d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	4804      	ldr	r0, [pc, #16]	@ (80009f8 <MX_GPIO_Init+0x9c>)
 80009e8:	f000 fd02 	bl	80013f0 <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020800 	.word	0x40020800

080009fc <__io_putchar>:
/** @brief Retargets the C library printf function to the USART.
 *  @param None
 *  @retval None
 */
PUTCHAR_PROTOTYPE
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop
     until the end of transmission */
  if(ch == '\n')
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b0a      	cmp	r3, #10
 8000a08:	d106      	bne.n	8000a18 <__io_putchar+0x1c>
    HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 8000a0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4907      	ldr	r1, [pc, #28]	@ (8000a30 <__io_putchar+0x34>)
 8000a12:	4808      	ldr	r0, [pc, #32]	@ (8000a34 <__io_putchar+0x38>)
 8000a14:	f001 fce8 	bl	80023e8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000a18:	1d39      	adds	r1, r7, #4
 8000a1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <__io_putchar+0x38>)
 8000a22:	f001 fce1 	bl	80023e8 <HAL_UART_Transmit>

}
 8000a26:	bf00      	nop
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	08004200 	.word	0x08004200
 8000a34:	200000d8 	.word	0x200000d8

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f000 fa9e 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f82c 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f7ff ff8a 	bl	800095c <MX_GPIO_Init>
  MX_TIM11_Init();
 8000a48:	f000 f9ae 	bl	8000da8 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000a4c:	f000 f9f2 	bl	8000e34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  dht11Init(&dht, GPIOC, GPIO_PIN_4);
 8000a50:	2210      	movs	r2, #16
 8000a52:	490e      	ldr	r1, [pc, #56]	@ (8000a8c <main+0x54>)
 8000a54:	480e      	ldr	r0, [pc, #56]	@ (8000a90 <main+0x58>)
 8000a56:	f7ff fdc3 	bl	80005e0 <dht11Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // dht11 읽기
	  if(dht11Read(&dht))
 8000a5a:	480d      	ldr	r0, [pc, #52]	@ (8000a90 <main+0x58>)
 8000a5c:	f7ff fe0e 	bl	800067c <dht11Read>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d009      	beq.n	8000a7a <main+0x42>
	  {
		  // 온습도 출력
		  printf("dgree : %d, humid : %d %% \n\r", dht.temperature, dht.humidity);
 8000a66:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <main+0x58>)
 8000a68:	799b      	ldrb	r3, [r3, #6]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <main+0x58>)
 8000a6e:	79db      	ldrb	r3, [r3, #7]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <main+0x5c>)
 8000a74:	f002 fd2c 	bl	80034d0 <iprintf>
 8000a78:	e002      	b.n	8000a80 <main+0x48>

	  }
	  else
	  {
		  printf("no data in DHT11 \n\r");
 8000a7a:	4807      	ldr	r0, [pc, #28]	@ (8000a98 <main+0x60>)
 8000a7c:	f002 fd28 	bl	80034d0 <iprintf>
	  }
	  HAL_Delay(2000);
 8000a80:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a84:	f000 faec 	bl	8001060 <HAL_Delay>
	  if(dht11Read(&dht))
 8000a88:	e7e7      	b.n	8000a5a <main+0x22>
 8000a8a:	bf00      	nop
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	20000084 	.word	0x20000084
 8000a94:	08004204 	.word	0x08004204
 8000a98:	08004224 	.word	0x08004224

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	@ 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2230      	movs	r2, #48	@ 0x30
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fd65 	bl	800357a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	4b27      	ldr	r3, [pc, #156]	@ (8000b64 <SystemClock_Config+0xc8>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	4a26      	ldr	r2, [pc, #152]	@ (8000b64 <SystemClock_Config+0xc8>)
 8000aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad0:	4b24      	ldr	r3, [pc, #144]	@ (8000b64 <SystemClock_Config+0xc8>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <SystemClock_Config+0xcc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a20      	ldr	r2, [pc, #128]	@ (8000b68 <SystemClock_Config+0xcc>)
 8000ae6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b1e      	ldr	r3, [pc, #120]	@ (8000b68 <SystemClock_Config+0xcc>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000afc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b02:	2302      	movs	r3, #2
 8000b04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b10:	2364      	movs	r3, #100	@ 0x64
 8000b12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1c:	f107 0320 	add.w	r3, r7, #32
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fe1b 	bl	800175c <HAL_RCC_OscConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b2c:	f000 f81e 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b30:	230f      	movs	r3, #15
 8000b32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b34:	2302      	movs	r3, #2
 8000b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	2103      	movs	r1, #3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 f87d 	bl	8001c4c <HAL_RCC_ClockConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b58:	f000 f808 	bl	8000b6c <Error_Handler>
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	3750      	adds	r7, #80	@ 0x50
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40007000 	.word	0x40007000

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <Error_Handler+0x8>

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <MemManage_Handler+0x4>

08000be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <UsageFault_Handler+0x4>

08000bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1e:	f000 f9ff 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c2c:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <USART2_IRQHandler+0x10>)
 8000c2e:	f001 fc67 	bl	8002500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000d8 	.word	0x200000d8

08000c3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e00a      	b.n	8000c64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c4e:	f3af 8000 	nop.w
 8000c52:	4601      	mov	r1, r0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	b2ca      	uxtb	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf0      	blt.n	8000c4e <_read+0x12>
  }

  return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e009      	b.n	8000c9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	60ba      	str	r2, [r7, #8]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff feb3 	bl	80009fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf1      	blt.n	8000c88 <_write+0x12>
  }
  return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_close>:

int _close(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cd6:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_isatty>:

int _isatty(int file)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d48:	f002 fc66 	bl	8003618 <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	e009      	b.n	8000d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d58:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <_sbrk+0x64>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20020000 	.word	0x20020000
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	2000008c 	.word	0x2000008c
 8000d80:	20000270 	.word	0x20000270

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000dae:	4a0f      	ldr	r2, [pc, #60]	@ (8000dec <MX_TIM11_Init+0x44>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000db4:	2263      	movs	r2, #99	@ 0x63
 8000db6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000dc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dc4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000dd4:	f001 f95a 	bl	800208c <HAL_TIM_Base_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000dde:	f7ff fec5 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000090 	.word	0x20000090
 8000dec:	40014800 	.word	0x40014800

08000df0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8000e2c <HAL_TIM_Base_MspInit+0x3c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d10d      	bne.n	8000e1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <HAL_TIM_Base_MspInit+0x40>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	4a09      	ldr	r2, [pc, #36]	@ (8000e30 <HAL_TIM_Base_MspInit+0x40>)
 8000e0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <HAL_TIM_Base_MspInit+0x40>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40014800 	.word	0x40014800
 8000e30:	40023800 	.word	0x40023800

08000e34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	@ (8000e84 <MX_USART2_UART_Init+0x50>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e6c:	f001 fa6c 	bl	8002348 <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e76:	f7ff fe79 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000d8 	.word	0x200000d8
 8000e84:	40004400 	.word	0x40004400

08000e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f1c <HAL_UART_MspInit+0x94>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d133      	bne.n	8000f12 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <HAL_UART_MspInit+0x98>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f20 <HAL_UART_MspInit+0x98>)
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eba:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <HAL_UART_MspInit+0x98>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <HAL_UART_MspInit+0x98>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <HAL_UART_MspInit+0x98>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_UART_MspInit+0x98>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <HAL_UART_MspInit+0x9c>)
 8000efe:	f000 fa77 	bl	80013f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2026      	movs	r0, #38	@ 0x26
 8000f08:	f000 f9a9 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f0c:	2026      	movs	r0, #38	@ 0x26
 8000f0e:	f000 f9c2 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	@ 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2c:	f7ff ff2a 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f30:	480c      	ldr	r0, [pc, #48]	@ (8000f64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f32:	490d      	ldr	r1, [pc, #52]	@ (8000f68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0a      	ldr	r2, [pc, #40]	@ (8000f70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f48:	4c0a      	ldr	r4, [pc, #40]	@ (8000f74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f56:	f002 fb65 	bl	8003624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fd6d 	bl	8000a38 <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f6c:	08004294 	.word	0x08004294
  ldr r2, =_sbss
 8000f70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f74:	20000270 	.word	0x20000270

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f94f 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	200f      	movs	r0, #15
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fde2 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f967 	bl	80012b2 <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f92f 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	@ (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	20000008 	.word	0x20000008
 800101c:	20000004 	.word	0x20000004

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	20000120 	.word	0x20000120

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000120 	.word	0x20000120

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	@ (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	@ (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	@ (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff29 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff3e 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff31 	bl	800110c <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa2 	bl	8001204 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff feb6 	bl	8001048 <HAL_GetTick>
 80012dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d008      	beq.n	80012fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2280      	movs	r2, #128	@ 0x80
 80012ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e052      	b.n	80013a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0216 	bic.w	r2, r2, #22
 800130a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800131a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	2b00      	cmp	r3, #0
 8001322:	d103      	bne.n	800132c <HAL_DMA_Abort+0x62>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0208 	bic.w	r2, r2, #8
 800133a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800134c:	e013      	b.n	8001376 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800134e:	f7ff fe7b 	bl	8001048 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b05      	cmp	r3, #5
 800135a:	d90c      	bls.n	8001376 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2220      	movs	r2, #32
 8001360:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2203      	movs	r2, #3
 8001366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e015      	b.n	80013a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1e4      	bne.n	800134e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001388:	223f      	movs	r2, #63	@ 0x3f
 800138a:	409a      	lsls	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d004      	beq.n	80013c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2280      	movs	r2, #128	@ 0x80
 80013c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e00c      	b.n	80013e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2205      	movs	r2, #5
 80013cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	@ 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	e159      	b.n	80016c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800140c:	2201      	movs	r2, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	429a      	cmp	r2, r3
 8001426:	f040 8148 	bne.w	80016ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d005      	beq.n	8001442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143e:	2b02      	cmp	r3, #2
 8001440:	d130      	bne.n	80014a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001478:	2201      	movs	r2, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	f003 0201 	and.w	r2, r3, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d017      	beq.n	80014e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d123      	bne.n	8001534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	69b9      	ldr	r1, [r7, #24]
 8001530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0203 	and.w	r2, r3, #3
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a2 	beq.w	80016ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b57      	ldr	r3, [pc, #348]	@ (80016d8 <HAL_GPIO_Init+0x2e8>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	4a56      	ldr	r2, [pc, #344]	@ (80016d8 <HAL_GPIO_Init+0x2e8>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001584:	6453      	str	r3, [r2, #68]	@ 0x44
 8001586:	4b54      	ldr	r3, [pc, #336]	@ (80016d8 <HAL_GPIO_Init+0x2e8>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001592:	4a52      	ldr	r2, [pc, #328]	@ (80016dc <HAL_GPIO_Init+0x2ec>)
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	3302      	adds	r3, #2
 800159a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	220f      	movs	r2, #15
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a49      	ldr	r2, [pc, #292]	@ (80016e0 <HAL_GPIO_Init+0x2f0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d019      	beq.n	80015f2 <HAL_GPIO_Init+0x202>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a48      	ldr	r2, [pc, #288]	@ (80016e4 <HAL_GPIO_Init+0x2f4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0x1fe>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a47      	ldr	r2, [pc, #284]	@ (80016e8 <HAL_GPIO_Init+0x2f8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00d      	beq.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a46      	ldr	r2, [pc, #280]	@ (80016ec <HAL_GPIO_Init+0x2fc>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d007      	beq.n	80015e6 <HAL_GPIO_Init+0x1f6>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a45      	ldr	r2, [pc, #276]	@ (80016f0 <HAL_GPIO_Init+0x300>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d101      	bne.n	80015e2 <HAL_GPIO_Init+0x1f2>
 80015de:	2304      	movs	r3, #4
 80015e0:	e008      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015e2:	2307      	movs	r3, #7
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015e6:	2303      	movs	r3, #3
 80015e8:	e004      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015f2:	2300      	movs	r3, #0
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	f002 0203 	and.w	r2, r2, #3
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	4093      	lsls	r3, r2
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001604:	4935      	ldr	r1, [pc, #212]	@ (80016dc <HAL_GPIO_Init+0x2ec>)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001612:	4b38      	ldr	r3, [pc, #224]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001636:	4a2f      	ldr	r2, [pc, #188]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800163c:	4b2d      	ldr	r3, [pc, #180]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001660:	4a24      	ldr	r2, [pc, #144]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001666:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168a:	4a1a      	ldr	r2, [pc, #104]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b4:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3301      	adds	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	f67f aea2 	bls.w	800140c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3724      	adds	r7, #36	@ 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40013800 	.word	0x40013800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40013c00 	.word	0x40013c00

080016f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e001      	b.n	800171a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
 8001734:	4613      	mov	r3, r2
 8001736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001738:	787b      	ldrb	r3, [r7, #1]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001744:	e003      	b.n	800174e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	041a      	lsls	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	619a      	str	r2, [r3, #24]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e267      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d075      	beq.n	8001866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800177a:	4b88      	ldr	r3, [pc, #544]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b04      	cmp	r3, #4
 8001784:	d00c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001786:	4b85      	ldr	r3, [pc, #532]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800178e:	2b08      	cmp	r3, #8
 8001790:	d112      	bne.n	80017b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001792:	4b82      	ldr	r3, [pc, #520]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800179e:	d10b      	bne.n	80017b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	4b7e      	ldr	r3, [pc, #504]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d05b      	beq.n	8001864 <HAL_RCC_OscConfig+0x108>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d157      	bne.n	8001864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e242      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c0:	d106      	bne.n	80017d0 <HAL_RCC_OscConfig+0x74>
 80017c2:	4b76      	ldr	r3, [pc, #472]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a75      	ldr	r2, [pc, #468]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e01d      	b.n	800180c <HAL_RCC_OscConfig+0xb0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x98>
 80017da:	4b70      	ldr	r3, [pc, #448]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a6f      	ldr	r2, [pc, #444]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b6d      	ldr	r3, [pc, #436]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6c      	ldr	r2, [pc, #432]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e00b      	b.n	800180c <HAL_RCC_OscConfig+0xb0>
 80017f4:	4b69      	ldr	r3, [pc, #420]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a68      	ldr	r2, [pc, #416]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b66      	ldr	r3, [pc, #408]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a65      	ldr	r2, [pc, #404]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d013      	beq.n	800183c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fc18 	bl	8001048 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fc14 	bl	8001048 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	@ 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e207      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b5b      	ldr	r3, [pc, #364]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0xc0>
 800183a:	e014      	b.n	8001866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fc04 	bl	8001048 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fc00 	bl	8001048 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	@ 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e1f3      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	4b51      	ldr	r3, [pc, #324]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0xe8>
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d063      	beq.n	800193a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001872:	4b4a      	ldr	r3, [pc, #296]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187e:	4b47      	ldr	r3, [pc, #284]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001886:	2b08      	cmp	r3, #8
 8001888:	d11c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188a:	4b44      	ldr	r3, [pc, #272]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d116      	bne.n	80018c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001896:	4b41      	ldr	r3, [pc, #260]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <HAL_RCC_OscConfig+0x152>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e1c7      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ae:	4b3b      	ldr	r3, [pc, #236]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4937      	ldr	r1, [pc, #220]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	e03a      	b.n	800193a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d020      	beq.n	800190e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018cc:	4b34      	ldr	r3, [pc, #208]	@ (80019a0 <HAL_RCC_OscConfig+0x244>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff fbb9 	bl	8001048 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018da:	f7ff fbb5 	bl	8001048 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e1a8      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f8:	4b28      	ldr	r3, [pc, #160]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4925      	ldr	r1, [pc, #148]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
 800190c:	e015      	b.n	800193a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190e:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <HAL_RCC_OscConfig+0x244>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff fb98 	bl	8001048 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191c:	f7ff fb94 	bl	8001048 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e187      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d036      	beq.n	80019b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d016      	beq.n	800197c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_RCC_OscConfig+0x248>)
 8001950:	2201      	movs	r2, #1
 8001952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff fb78 	bl	8001048 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff fb74 	bl	8001048 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e167      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x200>
 800197a:	e01b      	b.n	80019b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_RCC_OscConfig+0x248>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff fb61 	bl	8001048 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001988:	e00e      	b.n	80019a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198a:	f7ff fb5d 	bl	8001048 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d907      	bls.n	80019a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e150      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
 800199c:	40023800 	.word	0x40023800
 80019a0:	42470000 	.word	0x42470000
 80019a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a8:	4b88      	ldr	r3, [pc, #544]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1ea      	bne.n	800198a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8097 	beq.w	8001af0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c6:	4b81      	ldr	r3, [pc, #516]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	4b7d      	ldr	r3, [pc, #500]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a7c      	ldr	r2, [pc, #496]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b7a      	ldr	r3, [pc, #488]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ee:	2301      	movs	r3, #1
 80019f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f2:	4b77      	ldr	r3, [pc, #476]	@ (8001bd0 <HAL_RCC_OscConfig+0x474>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d118      	bne.n	8001a30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fe:	4b74      	ldr	r3, [pc, #464]	@ (8001bd0 <HAL_RCC_OscConfig+0x474>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a73      	ldr	r2, [pc, #460]	@ (8001bd0 <HAL_RCC_OscConfig+0x474>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fb1d 	bl	8001048 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7ff fb19 	bl	8001048 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e10c      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd0 <HAL_RCC_OscConfig+0x474>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x2ea>
 8001a38:	4b64      	ldr	r3, [pc, #400]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3c:	4a63      	ldr	r2, [pc, #396]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a44:	e01c      	b.n	8001a80 <HAL_RCC_OscConfig+0x324>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x30c>
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a52:	4a5e      	ldr	r2, [pc, #376]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0x324>
 8001a68:	4b58      	ldr	r3, [pc, #352]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6c:	4a57      	ldr	r2, [pc, #348]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a74:	4b55      	ldr	r3, [pc, #340]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a78:	4a54      	ldr	r2, [pc, #336]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a7a:	f023 0304 	bic.w	r3, r3, #4
 8001a7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d015      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff fade 	bl	8001048 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a90:	f7ff fada 	bl	8001048 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e0cb      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa6:	4b49      	ldr	r3, [pc, #292]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0ee      	beq.n	8001a90 <HAL_RCC_OscConfig+0x334>
 8001ab2:	e014      	b.n	8001ade <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fac8 	bl	8001048 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff fac4 	bl	8001048 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e0b5      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1ee      	bne.n	8001abc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae4:	4b39      	ldr	r3, [pc, #228]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	4a38      	ldr	r2, [pc, #224]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80a1 	beq.w	8001c3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001afa:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d05c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d141      	bne.n	8001b92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <HAL_RCC_OscConfig+0x478>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fa98 	bl	8001048 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff fa94 	bl	8001048 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e087      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2e:	4b27      	ldr	r3, [pc, #156]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69da      	ldr	r2, [r3, #28]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	019b      	lsls	r3, r3, #6
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b50:	085b      	lsrs	r3, r3, #1
 8001b52:	3b01      	subs	r3, #1
 8001b54:	041b      	lsls	r3, r3, #16
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	491b      	ldr	r1, [pc, #108]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_RCC_OscConfig+0x478>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fa6d 	bl	8001048 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff fa69 	bl	8001048 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e05c      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x416>
 8001b90:	e054      	b.n	8001c3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <HAL_RCC_OscConfig+0x478>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fa56 	bl	8001048 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff fa52 	bl	8001048 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e045      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x444>
 8001bbe:	e03d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e038      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <HAL_RCC_OscConfig+0x4ec>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d028      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d121      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d11a      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c08:	4013      	ands	r3, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d111      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1e:	085b      	lsrs	r3, r3, #1
 8001c20:	3b01      	subs	r3, #1
 8001c22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0cc      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c60:	4b68      	ldr	r3, [pc, #416]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d90c      	bls.n	8001c88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b65      	ldr	r3, [pc, #404]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b63      	ldr	r3, [pc, #396]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0b8      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d020      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca0:	4b59      	ldr	r3, [pc, #356]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4a58      	ldr	r2, [pc, #352]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001caa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb8:	4b53      	ldr	r3, [pc, #332]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	4a52      	ldr	r2, [pc, #328]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc4:	4b50      	ldr	r3, [pc, #320]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	494d      	ldr	r1, [pc, #308]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d044      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d107      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	4b47      	ldr	r3, [pc, #284]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d119      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e07f      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d003      	beq.n	8001d0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e06f      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e067      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2a:	4b37      	ldr	r3, [pc, #220]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f023 0203 	bic.w	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4934      	ldr	r1, [pc, #208]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7ff f984 	bl	8001048 <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f7ff f980 	bl	8001048 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e04f      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 020c 	and.w	r2, r3, #12
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d1eb      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b25      	ldr	r3, [pc, #148]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d20c      	bcs.n	8001d94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b22      	ldr	r3, [pc, #136]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e032      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	4916      	ldr	r1, [pc, #88]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d009      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dbe:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	490e      	ldr	r1, [pc, #56]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dd2:	f000 f821 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	490a      	ldr	r1, [pc, #40]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	5ccb      	ldrb	r3, [r1, r3]
 8001de6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dea:	4a09      	ldr	r2, [pc, #36]	@ (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dee:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff f8e4 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	08004238 	.word	0x08004238
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e1c:	b094      	sub	sp, #80	@ 0x50
 8001e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e30:	4b79      	ldr	r3, [pc, #484]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d00d      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x40>
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	f200 80e1 	bhi.w	8002004 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x34>
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e4a:	e0db      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e4c:	4b73      	ldr	r3, [pc, #460]	@ (800201c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e50:	e0db      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e52:	4b73      	ldr	r3, [pc, #460]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e56:	e0d8      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e58:	4b6f      	ldr	r3, [pc, #444]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e62:	4b6d      	ldr	r3, [pc, #436]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	099b      	lsrs	r3, r3, #6
 8001e74:	2200      	movs	r2, #0
 8001e76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e82:	2300      	movs	r3, #0
 8001e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	f04f 0000 	mov.w	r0, #0
 8001e92:	f04f 0100 	mov.w	r1, #0
 8001e96:	0159      	lsls	r1, r3, #5
 8001e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e9c:	0150      	lsls	r0, r2, #5
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	1a51      	subs	r1, r2, r1
 8001ea6:	6139      	str	r1, [r7, #16]
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ebc:	4659      	mov	r1, fp
 8001ebe:	018b      	lsls	r3, r1, #6
 8001ec0:	4651      	mov	r1, sl
 8001ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ec6:	4651      	mov	r1, sl
 8001ec8:	018a      	lsls	r2, r1, #6
 8001eca:	4651      	mov	r1, sl
 8001ecc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ed0:	4659      	mov	r1, fp
 8001ed2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eea:	4690      	mov	r8, r2
 8001eec:	4699      	mov	r9, r3
 8001eee:	4623      	mov	r3, r4
 8001ef0:	eb18 0303 	adds.w	r3, r8, r3
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	462b      	mov	r3, r5
 8001ef8:	eb49 0303 	adc.w	r3, r9, r3
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	024b      	lsls	r3, r1, #9
 8001f0e:	4621      	mov	r1, r4
 8001f10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f14:	4621      	mov	r1, r4
 8001f16:	024a      	lsls	r2, r1, #9
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f1e:	2200      	movs	r2, #0
 8001f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f28:	f7fe f9aa 	bl	8000280 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4613      	mov	r3, r2
 8001f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f34:	e058      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f36:	4b38      	ldr	r3, [pc, #224]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	099b      	lsrs	r3, r3, #6
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	4611      	mov	r1, r2
 8001f42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f46:	623b      	str	r3, [r7, #32]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f50:	4642      	mov	r2, r8
 8001f52:	464b      	mov	r3, r9
 8001f54:	f04f 0000 	mov.w	r0, #0
 8001f58:	f04f 0100 	mov.w	r1, #0
 8001f5c:	0159      	lsls	r1, r3, #5
 8001f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f62:	0150      	lsls	r0, r2, #5
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4641      	mov	r1, r8
 8001f6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f6e:	4649      	mov	r1, r9
 8001f70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f88:	ebb2 040a 	subs.w	r4, r2, sl
 8001f8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	00eb      	lsls	r3, r5, #3
 8001f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f9e:	00e2      	lsls	r2, r4, #3
 8001fa0:	4614      	mov	r4, r2
 8001fa2:	461d      	mov	r5, r3
 8001fa4:	4643      	mov	r3, r8
 8001fa6:	18e3      	adds	r3, r4, r3
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	464b      	mov	r3, r9
 8001fac:	eb45 0303 	adc.w	r3, r5, r3
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	028b      	lsls	r3, r1, #10
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc8:	4621      	mov	r1, r4
 8001fca:	028a      	lsls	r2, r1, #10
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	61fa      	str	r2, [r7, #28]
 8001fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fdc:	f7fe f950 	bl	8000280 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ff8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002002:	e002      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_RCC_GetSysClockFreq+0x204>)
 8002006:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800200c:	4618      	mov	r0, r3
 800200e:	3750      	adds	r7, #80	@ 0x50
 8002010:	46bd      	mov	sp, r7
 8002012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	00f42400 	.word	0x00f42400
 8002020:	007a1200 	.word	0x007a1200

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <HAL_RCC_GetHCLKFreq+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000

0800203c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002040:	f7ff fff0 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0a9b      	lsrs	r3, r3, #10
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4903      	ldr	r1, [pc, #12]	@ (8002060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	08004248 	.word	0x08004248

08002064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002068:	f7ff ffdc 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	0b5b      	lsrs	r3, r3, #13
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	4903      	ldr	r1, [pc, #12]	@ (8002088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	08004248 	.word	0x08004248

0800208c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e041      	b.n	8002122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fe9c 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3304      	adds	r3, #4
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f000 f8b0 	bl	8002230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d001      	beq.n	8002144 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e03c      	b.n	80021be <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1e      	ldr	r2, [pc, #120]	@ (80021cc <HAL_TIM_Base_Start+0xa0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d018      	beq.n	8002188 <HAL_TIM_Base_Start+0x5c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800215e:	d013      	beq.n	8002188 <HAL_TIM_Base_Start+0x5c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1a      	ldr	r2, [pc, #104]	@ (80021d0 <HAL_TIM_Base_Start+0xa4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00e      	beq.n	8002188 <HAL_TIM_Base_Start+0x5c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a19      	ldr	r2, [pc, #100]	@ (80021d4 <HAL_TIM_Base_Start+0xa8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_TIM_Base_Start+0x5c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <HAL_TIM_Base_Start+0xac>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d004      	beq.n	8002188 <HAL_TIM_Base_Start+0x5c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a16      	ldr	r2, [pc, #88]	@ (80021dc <HAL_TIM_Base_Start+0xb0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d111      	bne.n	80021ac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b06      	cmp	r3, #6
 8002198:	d010      	beq.n	80021bc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021aa:	e007      	b.n	80021bc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	40014000 	.word	0x40014000

080021e0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6a1a      	ldr	r2, [r3, #32]
 80021ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10f      	bne.n	8002218 <HAL_TIM_Base_Stop+0x38>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a1a      	ldr	r2, [r3, #32]
 80021fe:	f240 4344 	movw	r3, #1092	@ 0x444
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_TIM_Base_Stop+0x38>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a3a      	ldr	r2, [pc, #232]	@ (800232c <TIM_Base_SetConfig+0xfc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00f      	beq.n	8002268 <TIM_Base_SetConfig+0x38>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800224e:	d00b      	beq.n	8002268 <TIM_Base_SetConfig+0x38>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a37      	ldr	r2, [pc, #220]	@ (8002330 <TIM_Base_SetConfig+0x100>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d007      	beq.n	8002268 <TIM_Base_SetConfig+0x38>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a36      	ldr	r2, [pc, #216]	@ (8002334 <TIM_Base_SetConfig+0x104>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d003      	beq.n	8002268 <TIM_Base_SetConfig+0x38>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a35      	ldr	r2, [pc, #212]	@ (8002338 <TIM_Base_SetConfig+0x108>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d108      	bne.n	800227a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800226e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a2b      	ldr	r2, [pc, #172]	@ (800232c <TIM_Base_SetConfig+0xfc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01b      	beq.n	80022ba <TIM_Base_SetConfig+0x8a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002288:	d017      	beq.n	80022ba <TIM_Base_SetConfig+0x8a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a28      	ldr	r2, [pc, #160]	@ (8002330 <TIM_Base_SetConfig+0x100>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <TIM_Base_SetConfig+0x8a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a27      	ldr	r2, [pc, #156]	@ (8002334 <TIM_Base_SetConfig+0x104>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00f      	beq.n	80022ba <TIM_Base_SetConfig+0x8a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a26      	ldr	r2, [pc, #152]	@ (8002338 <TIM_Base_SetConfig+0x108>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00b      	beq.n	80022ba <TIM_Base_SetConfig+0x8a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a25      	ldr	r2, [pc, #148]	@ (800233c <TIM_Base_SetConfig+0x10c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <TIM_Base_SetConfig+0x8a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a24      	ldr	r2, [pc, #144]	@ (8002340 <TIM_Base_SetConfig+0x110>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d003      	beq.n	80022ba <TIM_Base_SetConfig+0x8a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a23      	ldr	r2, [pc, #140]	@ (8002344 <TIM_Base_SetConfig+0x114>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d108      	bne.n	80022cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a0e      	ldr	r2, [pc, #56]	@ (800232c <TIM_Base_SetConfig+0xfc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d103      	bne.n	8002300 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f023 0201 	bic.w	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	611a      	str	r2, [r3, #16]
  }
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40010000 	.word	0x40010000
 8002330:	40000400 	.word	0x40000400
 8002334:	40000800 	.word	0x40000800
 8002338:	40000c00 	.word	0x40000c00
 800233c:	40014000 	.word	0x40014000
 8002340:	40014400 	.word	0x40014400
 8002344:	40014800 	.word	0x40014800

08002348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e042      	b.n	80023e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fd8a 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	@ 0x24
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800238a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fd69 	bl	8002e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	@ 0x28
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b20      	cmp	r3, #32
 8002406:	d175      	bne.n	80024f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_UART_Transmit+0x2c>
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e06e      	b.n	80024f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2221      	movs	r2, #33	@ 0x21
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002426:	f7fe fe0f 	bl	8001048 <HAL_GetTick>
 800242a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	88fa      	ldrh	r2, [r7, #6]
 8002430:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002440:	d108      	bne.n	8002454 <HAL_UART_Transmit+0x6c>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d104      	bne.n	8002454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	e003      	b.n	800245c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800245c:	e02e      	b.n	80024bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2200      	movs	r2, #0
 8002466:	2180      	movs	r1, #128	@ 0x80
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fb05 	bl	8002a78 <UART_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e03a      	b.n	80024f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10b      	bne.n	800249e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	3302      	adds	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	e007      	b.n	80024ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	3301      	adds	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1cb      	bne.n	800245e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2140      	movs	r1, #64	@ 0x40
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fad1 	bl	8002a78 <UART_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e006      	b.n	80024f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3720      	adds	r7, #32
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0ba      	sub	sp, #232	@ 0xe8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800253e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10f      	bne.n	8002566 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_UART_IRQHandler+0x66>
 8002552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fbc2 	bl	8002ce8 <UART_Receive_IT>
      return;
 8002564:	e25b      	b.n	8002a1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80de 	beq.w	800272c <HAL_UART_IRQHandler+0x22c>
 8002570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d106      	bne.n	800258a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800257c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002580:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80d1 	beq.w	800272c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800258a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_UART_IRQHandler+0xae>
 8002596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800259a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_UART_IRQHandler+0xd2>
 80025ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	f043 0202 	orr.w	r2, r3, #2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_UART_IRQHandler+0xf6>
 80025de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f043 0204 	orr.w	r2, r3, #4
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d011      	beq.n	8002626 <HAL_UART_IRQHandler+0x126>
 8002602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d105      	bne.n	800261a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800260e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	f043 0208 	orr.w	r2, r3, #8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 81f2 	beq.w	8002a14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_UART_IRQHandler+0x14e>
 800263c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fb4d 	bl	8002ce8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002658:	2b40      	cmp	r3, #64	@ 0x40
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <HAL_UART_IRQHandler+0x17a>
 8002672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d04f      	beq.n	800271a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fa55 	bl	8002b2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268a:	2b40      	cmp	r3, #64	@ 0x40
 800268c:	d141      	bne.n	8002712 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3314      	adds	r3, #20
 8002694:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002698:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800269c:	e853 3f00 	ldrex	r3, [r3]
 80026a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80026a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3314      	adds	r3, #20
 80026b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80026be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80026c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026ca:	e841 2300 	strex	r3, r2, [r1]
 80026ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80026d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1d9      	bne.n	800268e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d013      	beq.n	800270a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e6:	4a7e      	ldr	r2, [pc, #504]	@ (80028e0 <HAL_UART_IRQHandler+0x3e0>)
 80026e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fe5b 	bl	80013aa <HAL_DMA_Abort_IT>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002704:	4610      	mov	r0, r2
 8002706:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002708:	e00e      	b.n	8002728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f99e 	bl	8002a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002710:	e00a      	b.n	8002728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f99a 	bl	8002a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002718:	e006      	b.n	8002728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f996 	bl	8002a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002726:	e175      	b.n	8002a14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	bf00      	nop
    return;
 800272a:	e173      	b.n	8002a14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	2b01      	cmp	r3, #1
 8002732:	f040 814f 	bne.w	80029d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8148 	beq.w	80029d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8141 	beq.w	80029d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002772:	2b40      	cmp	r3, #64	@ 0x40
 8002774:	f040 80b6 	bne.w	80028e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002784:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8145 	beq.w	8002a18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002796:	429a      	cmp	r2, r3
 8002798:	f080 813e 	bcs.w	8002a18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027ae:	f000 8088 	beq.w	80028c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	330c      	adds	r3, #12
 80027b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80027c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	330c      	adds	r3, #12
 80027da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80027de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80027ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027ee:	e841 2300 	strex	r3, r2, [r1]
 80027f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1d9      	bne.n	80027b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3314      	adds	r3, #20
 8002804:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800280e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3314      	adds	r3, #20
 800281e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002822:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002826:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002828:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800282a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800282e:	e841 2300 	strex	r3, r2, [r1]
 8002832:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002834:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e1      	bne.n	80027fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3314      	adds	r3, #20
 8002840:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002844:	e853 3f00 	ldrex	r3, [r3]
 8002848:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800284a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800284c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3314      	adds	r3, #20
 800285a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800285e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002860:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002862:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002864:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002866:	e841 2300 	strex	r3, r2, [r1]
 800286a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800286c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e3      	bne.n	800283a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800288a:	e853 3f00 	ldrex	r3, [r3]
 800288e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002892:	f023 0310 	bic.w	r3, r3, #16
 8002896:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	330c      	adds	r3, #12
 80028a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80028a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80028a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028ac:	e841 2300 	strex	r3, r2, [r1]
 80028b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80028b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e3      	bne.n	8002880 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fd04 	bl	80012ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2202      	movs	r2, #2
 80028c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4619      	mov	r1, r3
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f8c1 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028de:	e09b      	b.n	8002a18 <HAL_UART_IRQHandler+0x518>
 80028e0:	08002bf1 	.word	0x08002bf1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 808e 	beq.w	8002a1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8089 	beq.w	8002a1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	330c      	adds	r3, #12
 8002910:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002914:	e853 3f00 	ldrex	r3, [r3]
 8002918:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800291a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002920:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	330c      	adds	r3, #12
 800292a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800292e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002930:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002934:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800293c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e3      	bne.n	800290a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3314      	adds	r3, #20
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	e853 3f00 	ldrex	r3, [r3]
 8002950:	623b      	str	r3, [r7, #32]
   return(result);
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3314      	adds	r3, #20
 8002962:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002966:	633a      	str	r2, [r7, #48]	@ 0x30
 8002968:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800296c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800296e:	e841 2300 	strex	r3, r2, [r1]
 8002972:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1e3      	bne.n	8002942 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	330c      	adds	r3, #12
 800298e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	e853 3f00 	ldrex	r3, [r3]
 8002996:	60fb      	str	r3, [r7, #12]
   return(result);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0310 	bic.w	r3, r3, #16
 800299e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	330c      	adds	r3, #12
 80029a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80029ac:	61fa      	str	r2, [r7, #28]
 80029ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b0:	69b9      	ldr	r1, [r7, #24]
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	e841 2300 	strex	r3, r2, [r1]
 80029b8:	617b      	str	r3, [r7, #20]
   return(result);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e3      	bne.n	8002988 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f847 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029d2:	e023      	b.n	8002a1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d009      	beq.n	80029f4 <HAL_UART_IRQHandler+0x4f4>
 80029e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f913 	bl	8002c18 <UART_Transmit_IT>
    return;
 80029f2:	e014      	b.n	8002a1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00e      	beq.n	8002a1e <HAL_UART_IRQHandler+0x51e>
 8002a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f953 	bl	8002cb8 <UART_EndTransmit_IT>
    return;
 8002a12:	e004      	b.n	8002a1e <HAL_UART_IRQHandler+0x51e>
    return;
 8002a14:	bf00      	nop
 8002a16:	e002      	b.n	8002a1e <HAL_UART_IRQHandler+0x51e>
      return;
 8002a18:	bf00      	nop
 8002a1a:	e000      	b.n	8002a1e <HAL_UART_IRQHandler+0x51e>
      return;
 8002a1c:	bf00      	nop
  }
}
 8002a1e:	37e8      	adds	r7, #232	@ 0xe8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	4613      	mov	r3, r2
 8002a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a88:	e03b      	b.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d037      	beq.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a92:	f7fe fad9 	bl	8001048 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d302      	bcc.n	8002aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e03a      	b.n	8002b22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d023      	beq.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b80      	cmp	r3, #128	@ 0x80
 8002abe:	d020      	beq.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b40      	cmp	r3, #64	@ 0x40
 8002ac4:	d01d      	beq.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d116      	bne.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f81d 	bl	8002b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2208      	movs	r2, #8
 8002af4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e00f      	b.n	8002b22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	bf0c      	ite	eq
 8002b12:	2301      	moveq	r3, #1
 8002b14:	2300      	movne	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d0b4      	beq.n	8002a8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b095      	sub	sp, #84	@ 0x54
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	330c      	adds	r3, #12
 8002b38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3c:	e853 3f00 	ldrex	r3, [r3]
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	330c      	adds	r3, #12
 8002b50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b52:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1e5      	bne.n	8002b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	e853 3f00 	ldrex	r3, [r3]
 8002b74:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3314      	adds	r3, #20
 8002b84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b8e:	e841 2300 	strex	r3, r2, [r1]
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1e5      	bne.n	8002b66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d119      	bne.n	8002bd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	e853 3f00 	ldrex	r3, [r3]
 8002bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f023 0310 	bic.w	r3, r3, #16
 8002bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bc2:	61ba      	str	r2, [r7, #24]
 8002bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	6979      	ldr	r1, [r7, #20]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e5      	bne.n	8002ba2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002be4:	bf00      	nop
 8002be6:	3754      	adds	r7, #84	@ 0x54
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff ff1e 	bl	8002a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b21      	cmp	r3, #33	@ 0x21
 8002c2a:	d13e      	bne.n	8002caa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c34:	d114      	bne.n	8002c60 <UART_Transmit_IT+0x48>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d110      	bne.n	8002c60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	1c9a      	adds	r2, r3, #2
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	621a      	str	r2, [r3, #32]
 8002c5e:	e008      	b.n	8002c72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	1c59      	adds	r1, r3, #1
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6211      	str	r1, [r2, #32]
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10f      	bne.n	8002ca6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ca4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e000      	b.n	8002cac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002caa:	2302      	movs	r3, #2
  }
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff fea3 	bl	8002a24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	@ 0x30
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b22      	cmp	r3, #34	@ 0x22
 8002cfa:	f040 80ae 	bne.w	8002e5a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d06:	d117      	bne.n	8002d38 <UART_Receive_IT+0x50>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d113      	bne.n	8002d38 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d18:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	1c9a      	adds	r2, r3, #2
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d36:	e026      	b.n	8002d86 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d4a:	d007      	beq.n	8002d5c <UART_Receive_IT+0x74>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <UART_Receive_IT+0x82>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	e008      	b.n	8002d7c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4619      	mov	r1, r3
 8002d94:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d15d      	bne.n	8002e56 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0220 	bic.w	r2, r2, #32
 8002da8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002db8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d135      	bne.n	8002e4c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	330c      	adds	r3, #12
 8002dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	613b      	str	r3, [r7, #16]
   return(result);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f023 0310 	bic.w	r3, r3, #16
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e06:	623a      	str	r2, [r7, #32]
 8002e08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0a:	69f9      	ldr	r1, [r7, #28]
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	e841 2300 	strex	r3, r2, [r1]
 8002e12:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1e5      	bne.n	8002de6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d10a      	bne.n	8002e3e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e42:	4619      	mov	r1, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff fe0b 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
 8002e4a:	e002      	b.n	8002e52 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fdf3 	bl	8002a38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e002      	b.n	8002e5c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3730      	adds	r7, #48	@ 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e68:	b0c0      	sub	sp, #256	@ 0x100
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e80:	68d9      	ldr	r1, [r3, #12]
 8002e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	ea40 0301 	orr.w	r3, r0, r1
 8002e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ebc:	f021 010c 	bic.w	r1, r1, #12
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ede:	6999      	ldr	r1, [r3, #24]
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	ea40 0301 	orr.w	r3, r0, r1
 8002eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4b8f      	ldr	r3, [pc, #572]	@ (8003130 <UART_SetConfig+0x2cc>)
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d005      	beq.n	8002f04 <UART_SetConfig+0xa0>
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b8d      	ldr	r3, [pc, #564]	@ (8003134 <UART_SetConfig+0x2d0>)
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d104      	bne.n	8002f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f04:	f7ff f8ae 	bl	8002064 <HAL_RCC_GetPCLK2Freq>
 8002f08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f0c:	e003      	b.n	8002f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f0e:	f7ff f895 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8002f12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f20:	f040 810c 	bne.w	800313c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f36:	4622      	mov	r2, r4
 8002f38:	462b      	mov	r3, r5
 8002f3a:	1891      	adds	r1, r2, r2
 8002f3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f3e:	415b      	adcs	r3, r3
 8002f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f46:	4621      	mov	r1, r4
 8002f48:	eb12 0801 	adds.w	r8, r2, r1
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	eb43 0901 	adc.w	r9, r3, r1
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f66:	4690      	mov	r8, r2
 8002f68:	4699      	mov	r9, r3
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	eb18 0303 	adds.w	r3, r8, r3
 8002f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f74:	462b      	mov	r3, r5
 8002f76:	eb49 0303 	adc.w	r3, r9, r3
 8002f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f92:	460b      	mov	r3, r1
 8002f94:	18db      	adds	r3, r3, r3
 8002f96:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f98:	4613      	mov	r3, r2
 8002f9a:	eb42 0303 	adc.w	r3, r2, r3
 8002f9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fa8:	f7fd f96a 	bl	8000280 <__aeabi_uldivmod>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4b61      	ldr	r3, [pc, #388]	@ (8003138 <UART_SetConfig+0x2d4>)
 8002fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	011c      	lsls	r4, r3, #4
 8002fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fcc:	4642      	mov	r2, r8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	1891      	adds	r1, r2, r2
 8002fd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fd4:	415b      	adcs	r3, r3
 8002fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fdc:	4641      	mov	r1, r8
 8002fde:	eb12 0a01 	adds.w	sl, r2, r1
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ffc:	4692      	mov	sl, r2
 8002ffe:	469b      	mov	fp, r3
 8003000:	4643      	mov	r3, r8
 8003002:	eb1a 0303 	adds.w	r3, sl, r3
 8003006:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800300a:	464b      	mov	r3, r9
 800300c:	eb4b 0303 	adc.w	r3, fp, r3
 8003010:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003020:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003028:	460b      	mov	r3, r1
 800302a:	18db      	adds	r3, r3, r3
 800302c:	643b      	str	r3, [r7, #64]	@ 0x40
 800302e:	4613      	mov	r3, r2
 8003030:	eb42 0303 	adc.w	r3, r2, r3
 8003034:	647b      	str	r3, [r7, #68]	@ 0x44
 8003036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800303a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800303e:	f7fd f91f 	bl	8000280 <__aeabi_uldivmod>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4611      	mov	r1, r2
 8003048:	4b3b      	ldr	r3, [pc, #236]	@ (8003138 <UART_SetConfig+0x2d4>)
 800304a:	fba3 2301 	umull	r2, r3, r3, r1
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2264      	movs	r2, #100	@ 0x64
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	1acb      	subs	r3, r1, r3
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800305e:	4b36      	ldr	r3, [pc, #216]	@ (8003138 <UART_SetConfig+0x2d4>)
 8003060:	fba3 2302 	umull	r2, r3, r3, r2
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800306c:	441c      	add	r4, r3
 800306e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003072:	2200      	movs	r2, #0
 8003074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003078:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800307c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003080:	4642      	mov	r2, r8
 8003082:	464b      	mov	r3, r9
 8003084:	1891      	adds	r1, r2, r2
 8003086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003088:	415b      	adcs	r3, r3
 800308a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800308c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003090:	4641      	mov	r1, r8
 8003092:	1851      	adds	r1, r2, r1
 8003094:	6339      	str	r1, [r7, #48]	@ 0x30
 8003096:	4649      	mov	r1, r9
 8003098:	414b      	adcs	r3, r1
 800309a:	637b      	str	r3, [r7, #52]	@ 0x34
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030a8:	4659      	mov	r1, fp
 80030aa:	00cb      	lsls	r3, r1, #3
 80030ac:	4651      	mov	r1, sl
 80030ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030b2:	4651      	mov	r1, sl
 80030b4:	00ca      	lsls	r2, r1, #3
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	4642      	mov	r2, r8
 80030be:	189b      	adds	r3, r3, r2
 80030c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030c4:	464b      	mov	r3, r9
 80030c6:	460a      	mov	r2, r1
 80030c8:	eb42 0303 	adc.w	r3, r2, r3
 80030cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030e4:	460b      	mov	r3, r1
 80030e6:	18db      	adds	r3, r3, r3
 80030e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ea:	4613      	mov	r3, r2
 80030ec:	eb42 0303 	adc.w	r3, r2, r3
 80030f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030fa:	f7fd f8c1 	bl	8000280 <__aeabi_uldivmod>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4b0d      	ldr	r3, [pc, #52]	@ (8003138 <UART_SetConfig+0x2d4>)
 8003104:	fba3 1302 	umull	r1, r3, r3, r2
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	2164      	movs	r1, #100	@ 0x64
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	3332      	adds	r3, #50	@ 0x32
 8003116:	4a08      	ldr	r2, [pc, #32]	@ (8003138 <UART_SetConfig+0x2d4>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	f003 0207 	and.w	r2, r3, #7
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4422      	add	r2, r4
 800312a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800312c:	e106      	b.n	800333c <UART_SetConfig+0x4d8>
 800312e:	bf00      	nop
 8003130:	40011000 	.word	0x40011000
 8003134:	40011400 	.word	0x40011400
 8003138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800313c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003140:	2200      	movs	r2, #0
 8003142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003146:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800314a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800314e:	4642      	mov	r2, r8
 8003150:	464b      	mov	r3, r9
 8003152:	1891      	adds	r1, r2, r2
 8003154:	6239      	str	r1, [r7, #32]
 8003156:	415b      	adcs	r3, r3
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
 800315a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800315e:	4641      	mov	r1, r8
 8003160:	1854      	adds	r4, r2, r1
 8003162:	4649      	mov	r1, r9
 8003164:	eb43 0501 	adc.w	r5, r3, r1
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	00eb      	lsls	r3, r5, #3
 8003172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003176:	00e2      	lsls	r2, r4, #3
 8003178:	4614      	mov	r4, r2
 800317a:	461d      	mov	r5, r3
 800317c:	4643      	mov	r3, r8
 800317e:	18e3      	adds	r3, r4, r3
 8003180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003184:	464b      	mov	r3, r9
 8003186:	eb45 0303 	adc.w	r3, r5, r3
 800318a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800319a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031aa:	4629      	mov	r1, r5
 80031ac:	008b      	lsls	r3, r1, #2
 80031ae:	4621      	mov	r1, r4
 80031b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031b4:	4621      	mov	r1, r4
 80031b6:	008a      	lsls	r2, r1, #2
 80031b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031bc:	f7fd f860 	bl	8000280 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4b60      	ldr	r3, [pc, #384]	@ (8003348 <UART_SetConfig+0x4e4>)
 80031c6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	011c      	lsls	r4, r3, #4
 80031ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031e0:	4642      	mov	r2, r8
 80031e2:	464b      	mov	r3, r9
 80031e4:	1891      	adds	r1, r2, r2
 80031e6:	61b9      	str	r1, [r7, #24]
 80031e8:	415b      	adcs	r3, r3
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f0:	4641      	mov	r1, r8
 80031f2:	1851      	adds	r1, r2, r1
 80031f4:	6139      	str	r1, [r7, #16]
 80031f6:	4649      	mov	r1, r9
 80031f8:	414b      	adcs	r3, r1
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003208:	4659      	mov	r1, fp
 800320a:	00cb      	lsls	r3, r1, #3
 800320c:	4651      	mov	r1, sl
 800320e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003212:	4651      	mov	r1, sl
 8003214:	00ca      	lsls	r2, r1, #3
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	4603      	mov	r3, r0
 800321c:	4642      	mov	r2, r8
 800321e:	189b      	adds	r3, r3, r2
 8003220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003224:	464b      	mov	r3, r9
 8003226:	460a      	mov	r2, r1
 8003228:	eb42 0303 	adc.w	r3, r2, r3
 800322c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	67bb      	str	r3, [r7, #120]	@ 0x78
 800323a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003248:	4649      	mov	r1, r9
 800324a:	008b      	lsls	r3, r1, #2
 800324c:	4641      	mov	r1, r8
 800324e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003252:	4641      	mov	r1, r8
 8003254:	008a      	lsls	r2, r1, #2
 8003256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800325a:	f7fd f811 	bl	8000280 <__aeabi_uldivmod>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4611      	mov	r1, r2
 8003264:	4b38      	ldr	r3, [pc, #224]	@ (8003348 <UART_SetConfig+0x4e4>)
 8003266:	fba3 2301 	umull	r2, r3, r3, r1
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2264      	movs	r2, #100	@ 0x64
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	1acb      	subs	r3, r1, r3
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	3332      	adds	r3, #50	@ 0x32
 8003278:	4a33      	ldr	r2, [pc, #204]	@ (8003348 <UART_SetConfig+0x4e4>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003284:	441c      	add	r4, r3
 8003286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800328a:	2200      	movs	r2, #0
 800328c:	673b      	str	r3, [r7, #112]	@ 0x70
 800328e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003290:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003294:	4642      	mov	r2, r8
 8003296:	464b      	mov	r3, r9
 8003298:	1891      	adds	r1, r2, r2
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	415b      	adcs	r3, r3
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032a4:	4641      	mov	r1, r8
 80032a6:	1851      	adds	r1, r2, r1
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	4649      	mov	r1, r9
 80032ac:	414b      	adcs	r3, r1
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032bc:	4659      	mov	r1, fp
 80032be:	00cb      	lsls	r3, r1, #3
 80032c0:	4651      	mov	r1, sl
 80032c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c6:	4651      	mov	r1, sl
 80032c8:	00ca      	lsls	r2, r1, #3
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	4642      	mov	r2, r8
 80032d2:	189b      	adds	r3, r3, r2
 80032d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032d6:	464b      	mov	r3, r9
 80032d8:	460a      	mov	r2, r1
 80032da:	eb42 0303 	adc.w	r3, r2, r3
 80032de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80032ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032f8:	4649      	mov	r1, r9
 80032fa:	008b      	lsls	r3, r1, #2
 80032fc:	4641      	mov	r1, r8
 80032fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003302:	4641      	mov	r1, r8
 8003304:	008a      	lsls	r2, r1, #2
 8003306:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800330a:	f7fc ffb9 	bl	8000280 <__aeabi_uldivmod>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4b0d      	ldr	r3, [pc, #52]	@ (8003348 <UART_SetConfig+0x4e4>)
 8003314:	fba3 1302 	umull	r1, r3, r3, r2
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	2164      	movs	r1, #100	@ 0x64
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	3332      	adds	r3, #50	@ 0x32
 8003326:	4a08      	ldr	r2, [pc, #32]	@ (8003348 <UART_SetConfig+0x4e4>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	f003 020f 	and.w	r2, r3, #15
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4422      	add	r2, r4
 800333a:	609a      	str	r2, [r3, #8]
}
 800333c:	bf00      	nop
 800333e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003342:	46bd      	mov	sp, r7
 8003344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003348:	51eb851f 	.word	0x51eb851f

0800334c <std>:
 800334c:	2300      	movs	r3, #0
 800334e:	b510      	push	{r4, lr}
 8003350:	4604      	mov	r4, r0
 8003352:	e9c0 3300 	strd	r3, r3, [r0]
 8003356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800335a:	6083      	str	r3, [r0, #8]
 800335c:	8181      	strh	r1, [r0, #12]
 800335e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003360:	81c2      	strh	r2, [r0, #14]
 8003362:	6183      	str	r3, [r0, #24]
 8003364:	4619      	mov	r1, r3
 8003366:	2208      	movs	r2, #8
 8003368:	305c      	adds	r0, #92	@ 0x5c
 800336a:	f000 f906 	bl	800357a <memset>
 800336e:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <std+0x58>)
 8003370:	6263      	str	r3, [r4, #36]	@ 0x24
 8003372:	4b0d      	ldr	r3, [pc, #52]	@ (80033a8 <std+0x5c>)
 8003374:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003376:	4b0d      	ldr	r3, [pc, #52]	@ (80033ac <std+0x60>)
 8003378:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800337a:	4b0d      	ldr	r3, [pc, #52]	@ (80033b0 <std+0x64>)
 800337c:	6323      	str	r3, [r4, #48]	@ 0x30
 800337e:	4b0d      	ldr	r3, [pc, #52]	@ (80033b4 <std+0x68>)
 8003380:	6224      	str	r4, [r4, #32]
 8003382:	429c      	cmp	r4, r3
 8003384:	d006      	beq.n	8003394 <std+0x48>
 8003386:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800338a:	4294      	cmp	r4, r2
 800338c:	d002      	beq.n	8003394 <std+0x48>
 800338e:	33d0      	adds	r3, #208	@ 0xd0
 8003390:	429c      	cmp	r4, r3
 8003392:	d105      	bne.n	80033a0 <std+0x54>
 8003394:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800339c:	f000 b966 	b.w	800366c <__retarget_lock_init_recursive>
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	bf00      	nop
 80033a4:	080034f5 	.word	0x080034f5
 80033a8:	08003517 	.word	0x08003517
 80033ac:	0800354f 	.word	0x0800354f
 80033b0:	08003573 	.word	0x08003573
 80033b4:	20000124 	.word	0x20000124

080033b8 <stdio_exit_handler>:
 80033b8:	4a02      	ldr	r2, [pc, #8]	@ (80033c4 <stdio_exit_handler+0xc>)
 80033ba:	4903      	ldr	r1, [pc, #12]	@ (80033c8 <stdio_exit_handler+0x10>)
 80033bc:	4803      	ldr	r0, [pc, #12]	@ (80033cc <stdio_exit_handler+0x14>)
 80033be:	f000 b869 	b.w	8003494 <_fwalk_sglue>
 80033c2:	bf00      	nop
 80033c4:	2000000c 	.word	0x2000000c
 80033c8:	08003f09 	.word	0x08003f09
 80033cc:	2000001c 	.word	0x2000001c

080033d0 <cleanup_stdio>:
 80033d0:	6841      	ldr	r1, [r0, #4]
 80033d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003404 <cleanup_stdio+0x34>)
 80033d4:	4299      	cmp	r1, r3
 80033d6:	b510      	push	{r4, lr}
 80033d8:	4604      	mov	r4, r0
 80033da:	d001      	beq.n	80033e0 <cleanup_stdio+0x10>
 80033dc:	f000 fd94 	bl	8003f08 <_fflush_r>
 80033e0:	68a1      	ldr	r1, [r4, #8]
 80033e2:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <cleanup_stdio+0x38>)
 80033e4:	4299      	cmp	r1, r3
 80033e6:	d002      	beq.n	80033ee <cleanup_stdio+0x1e>
 80033e8:	4620      	mov	r0, r4
 80033ea:	f000 fd8d 	bl	8003f08 <_fflush_r>
 80033ee:	68e1      	ldr	r1, [r4, #12]
 80033f0:	4b06      	ldr	r3, [pc, #24]	@ (800340c <cleanup_stdio+0x3c>)
 80033f2:	4299      	cmp	r1, r3
 80033f4:	d004      	beq.n	8003400 <cleanup_stdio+0x30>
 80033f6:	4620      	mov	r0, r4
 80033f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033fc:	f000 bd84 	b.w	8003f08 <_fflush_r>
 8003400:	bd10      	pop	{r4, pc}
 8003402:	bf00      	nop
 8003404:	20000124 	.word	0x20000124
 8003408:	2000018c 	.word	0x2000018c
 800340c:	200001f4 	.word	0x200001f4

08003410 <global_stdio_init.part.0>:
 8003410:	b510      	push	{r4, lr}
 8003412:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <global_stdio_init.part.0+0x30>)
 8003414:	4c0b      	ldr	r4, [pc, #44]	@ (8003444 <global_stdio_init.part.0+0x34>)
 8003416:	4a0c      	ldr	r2, [pc, #48]	@ (8003448 <global_stdio_init.part.0+0x38>)
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	4620      	mov	r0, r4
 800341c:	2200      	movs	r2, #0
 800341e:	2104      	movs	r1, #4
 8003420:	f7ff ff94 	bl	800334c <std>
 8003424:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003428:	2201      	movs	r2, #1
 800342a:	2109      	movs	r1, #9
 800342c:	f7ff ff8e 	bl	800334c <std>
 8003430:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003434:	2202      	movs	r2, #2
 8003436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800343a:	2112      	movs	r1, #18
 800343c:	f7ff bf86 	b.w	800334c <std>
 8003440:	2000025c 	.word	0x2000025c
 8003444:	20000124 	.word	0x20000124
 8003448:	080033b9 	.word	0x080033b9

0800344c <__sfp_lock_acquire>:
 800344c:	4801      	ldr	r0, [pc, #4]	@ (8003454 <__sfp_lock_acquire+0x8>)
 800344e:	f000 b90e 	b.w	800366e <__retarget_lock_acquire_recursive>
 8003452:	bf00      	nop
 8003454:	20000265 	.word	0x20000265

08003458 <__sfp_lock_release>:
 8003458:	4801      	ldr	r0, [pc, #4]	@ (8003460 <__sfp_lock_release+0x8>)
 800345a:	f000 b909 	b.w	8003670 <__retarget_lock_release_recursive>
 800345e:	bf00      	nop
 8003460:	20000265 	.word	0x20000265

08003464 <__sinit>:
 8003464:	b510      	push	{r4, lr}
 8003466:	4604      	mov	r4, r0
 8003468:	f7ff fff0 	bl	800344c <__sfp_lock_acquire>
 800346c:	6a23      	ldr	r3, [r4, #32]
 800346e:	b11b      	cbz	r3, 8003478 <__sinit+0x14>
 8003470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003474:	f7ff bff0 	b.w	8003458 <__sfp_lock_release>
 8003478:	4b04      	ldr	r3, [pc, #16]	@ (800348c <__sinit+0x28>)
 800347a:	6223      	str	r3, [r4, #32]
 800347c:	4b04      	ldr	r3, [pc, #16]	@ (8003490 <__sinit+0x2c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f5      	bne.n	8003470 <__sinit+0xc>
 8003484:	f7ff ffc4 	bl	8003410 <global_stdio_init.part.0>
 8003488:	e7f2      	b.n	8003470 <__sinit+0xc>
 800348a:	bf00      	nop
 800348c:	080033d1 	.word	0x080033d1
 8003490:	2000025c 	.word	0x2000025c

08003494 <_fwalk_sglue>:
 8003494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003498:	4607      	mov	r7, r0
 800349a:	4688      	mov	r8, r1
 800349c:	4614      	mov	r4, r2
 800349e:	2600      	movs	r6, #0
 80034a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034a4:	f1b9 0901 	subs.w	r9, r9, #1
 80034a8:	d505      	bpl.n	80034b6 <_fwalk_sglue+0x22>
 80034aa:	6824      	ldr	r4, [r4, #0]
 80034ac:	2c00      	cmp	r4, #0
 80034ae:	d1f7      	bne.n	80034a0 <_fwalk_sglue+0xc>
 80034b0:	4630      	mov	r0, r6
 80034b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034b6:	89ab      	ldrh	r3, [r5, #12]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d907      	bls.n	80034cc <_fwalk_sglue+0x38>
 80034bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034c0:	3301      	adds	r3, #1
 80034c2:	d003      	beq.n	80034cc <_fwalk_sglue+0x38>
 80034c4:	4629      	mov	r1, r5
 80034c6:	4638      	mov	r0, r7
 80034c8:	47c0      	blx	r8
 80034ca:	4306      	orrs	r6, r0
 80034cc:	3568      	adds	r5, #104	@ 0x68
 80034ce:	e7e9      	b.n	80034a4 <_fwalk_sglue+0x10>

080034d0 <iprintf>:
 80034d0:	b40f      	push	{r0, r1, r2, r3}
 80034d2:	b507      	push	{r0, r1, r2, lr}
 80034d4:	4906      	ldr	r1, [pc, #24]	@ (80034f0 <iprintf+0x20>)
 80034d6:	ab04      	add	r3, sp, #16
 80034d8:	6808      	ldr	r0, [r1, #0]
 80034da:	f853 2b04 	ldr.w	r2, [r3], #4
 80034de:	6881      	ldr	r1, [r0, #8]
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	f000 f9e9 	bl	80038b8 <_vfiprintf_r>
 80034e6:	b003      	add	sp, #12
 80034e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80034ec:	b004      	add	sp, #16
 80034ee:	4770      	bx	lr
 80034f0:	20000018 	.word	0x20000018

080034f4 <__sread>:
 80034f4:	b510      	push	{r4, lr}
 80034f6:	460c      	mov	r4, r1
 80034f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fc:	f000 f868 	bl	80035d0 <_read_r>
 8003500:	2800      	cmp	r0, #0
 8003502:	bfab      	itete	ge
 8003504:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003506:	89a3      	ldrhlt	r3, [r4, #12]
 8003508:	181b      	addge	r3, r3, r0
 800350a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800350e:	bfac      	ite	ge
 8003510:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003512:	81a3      	strhlt	r3, [r4, #12]
 8003514:	bd10      	pop	{r4, pc}

08003516 <__swrite>:
 8003516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800351a:	461f      	mov	r7, r3
 800351c:	898b      	ldrh	r3, [r1, #12]
 800351e:	05db      	lsls	r3, r3, #23
 8003520:	4605      	mov	r5, r0
 8003522:	460c      	mov	r4, r1
 8003524:	4616      	mov	r6, r2
 8003526:	d505      	bpl.n	8003534 <__swrite+0x1e>
 8003528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800352c:	2302      	movs	r3, #2
 800352e:	2200      	movs	r2, #0
 8003530:	f000 f83c 	bl	80035ac <_lseek_r>
 8003534:	89a3      	ldrh	r3, [r4, #12]
 8003536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800353a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800353e:	81a3      	strh	r3, [r4, #12]
 8003540:	4632      	mov	r2, r6
 8003542:	463b      	mov	r3, r7
 8003544:	4628      	mov	r0, r5
 8003546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800354a:	f000 b853 	b.w	80035f4 <_write_r>

0800354e <__sseek>:
 800354e:	b510      	push	{r4, lr}
 8003550:	460c      	mov	r4, r1
 8003552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003556:	f000 f829 	bl	80035ac <_lseek_r>
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	bf15      	itete	ne
 8003560:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003562:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003566:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800356a:	81a3      	strheq	r3, [r4, #12]
 800356c:	bf18      	it	ne
 800356e:	81a3      	strhne	r3, [r4, #12]
 8003570:	bd10      	pop	{r4, pc}

08003572 <__sclose>:
 8003572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003576:	f000 b809 	b.w	800358c <_close_r>

0800357a <memset>:
 800357a:	4402      	add	r2, r0
 800357c:	4603      	mov	r3, r0
 800357e:	4293      	cmp	r3, r2
 8003580:	d100      	bne.n	8003584 <memset+0xa>
 8003582:	4770      	bx	lr
 8003584:	f803 1b01 	strb.w	r1, [r3], #1
 8003588:	e7f9      	b.n	800357e <memset+0x4>
	...

0800358c <_close_r>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	4d06      	ldr	r5, [pc, #24]	@ (80035a8 <_close_r+0x1c>)
 8003590:	2300      	movs	r3, #0
 8003592:	4604      	mov	r4, r0
 8003594:	4608      	mov	r0, r1
 8003596:	602b      	str	r3, [r5, #0]
 8003598:	f7fd fb89 	bl	8000cae <_close>
 800359c:	1c43      	adds	r3, r0, #1
 800359e:	d102      	bne.n	80035a6 <_close_r+0x1a>
 80035a0:	682b      	ldr	r3, [r5, #0]
 80035a2:	b103      	cbz	r3, 80035a6 <_close_r+0x1a>
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	bd38      	pop	{r3, r4, r5, pc}
 80035a8:	20000260 	.word	0x20000260

080035ac <_lseek_r>:
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	4d07      	ldr	r5, [pc, #28]	@ (80035cc <_lseek_r+0x20>)
 80035b0:	4604      	mov	r4, r0
 80035b2:	4608      	mov	r0, r1
 80035b4:	4611      	mov	r1, r2
 80035b6:	2200      	movs	r2, #0
 80035b8:	602a      	str	r2, [r5, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f7fd fb9e 	bl	8000cfc <_lseek>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	d102      	bne.n	80035ca <_lseek_r+0x1e>
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	b103      	cbz	r3, 80035ca <_lseek_r+0x1e>
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	20000260 	.word	0x20000260

080035d0 <_read_r>:
 80035d0:	b538      	push	{r3, r4, r5, lr}
 80035d2:	4d07      	ldr	r5, [pc, #28]	@ (80035f0 <_read_r+0x20>)
 80035d4:	4604      	mov	r4, r0
 80035d6:	4608      	mov	r0, r1
 80035d8:	4611      	mov	r1, r2
 80035da:	2200      	movs	r2, #0
 80035dc:	602a      	str	r2, [r5, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	f7fd fb2c 	bl	8000c3c <_read>
 80035e4:	1c43      	adds	r3, r0, #1
 80035e6:	d102      	bne.n	80035ee <_read_r+0x1e>
 80035e8:	682b      	ldr	r3, [r5, #0]
 80035ea:	b103      	cbz	r3, 80035ee <_read_r+0x1e>
 80035ec:	6023      	str	r3, [r4, #0]
 80035ee:	bd38      	pop	{r3, r4, r5, pc}
 80035f0:	20000260 	.word	0x20000260

080035f4 <_write_r>:
 80035f4:	b538      	push	{r3, r4, r5, lr}
 80035f6:	4d07      	ldr	r5, [pc, #28]	@ (8003614 <_write_r+0x20>)
 80035f8:	4604      	mov	r4, r0
 80035fa:	4608      	mov	r0, r1
 80035fc:	4611      	mov	r1, r2
 80035fe:	2200      	movs	r2, #0
 8003600:	602a      	str	r2, [r5, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	f7fd fb37 	bl	8000c76 <_write>
 8003608:	1c43      	adds	r3, r0, #1
 800360a:	d102      	bne.n	8003612 <_write_r+0x1e>
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	b103      	cbz	r3, 8003612 <_write_r+0x1e>
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	bd38      	pop	{r3, r4, r5, pc}
 8003614:	20000260 	.word	0x20000260

08003618 <__errno>:
 8003618:	4b01      	ldr	r3, [pc, #4]	@ (8003620 <__errno+0x8>)
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000018 	.word	0x20000018

08003624 <__libc_init_array>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	4d0d      	ldr	r5, [pc, #52]	@ (800365c <__libc_init_array+0x38>)
 8003628:	4c0d      	ldr	r4, [pc, #52]	@ (8003660 <__libc_init_array+0x3c>)
 800362a:	1b64      	subs	r4, r4, r5
 800362c:	10a4      	asrs	r4, r4, #2
 800362e:	2600      	movs	r6, #0
 8003630:	42a6      	cmp	r6, r4
 8003632:	d109      	bne.n	8003648 <__libc_init_array+0x24>
 8003634:	4d0b      	ldr	r5, [pc, #44]	@ (8003664 <__libc_init_array+0x40>)
 8003636:	4c0c      	ldr	r4, [pc, #48]	@ (8003668 <__libc_init_array+0x44>)
 8003638:	f000 fdb6 	bl	80041a8 <_init>
 800363c:	1b64      	subs	r4, r4, r5
 800363e:	10a4      	asrs	r4, r4, #2
 8003640:	2600      	movs	r6, #0
 8003642:	42a6      	cmp	r6, r4
 8003644:	d105      	bne.n	8003652 <__libc_init_array+0x2e>
 8003646:	bd70      	pop	{r4, r5, r6, pc}
 8003648:	f855 3b04 	ldr.w	r3, [r5], #4
 800364c:	4798      	blx	r3
 800364e:	3601      	adds	r6, #1
 8003650:	e7ee      	b.n	8003630 <__libc_init_array+0xc>
 8003652:	f855 3b04 	ldr.w	r3, [r5], #4
 8003656:	4798      	blx	r3
 8003658:	3601      	adds	r6, #1
 800365a:	e7f2      	b.n	8003642 <__libc_init_array+0x1e>
 800365c:	0800428c 	.word	0x0800428c
 8003660:	0800428c 	.word	0x0800428c
 8003664:	0800428c 	.word	0x0800428c
 8003668:	08004290 	.word	0x08004290

0800366c <__retarget_lock_init_recursive>:
 800366c:	4770      	bx	lr

0800366e <__retarget_lock_acquire_recursive>:
 800366e:	4770      	bx	lr

08003670 <__retarget_lock_release_recursive>:
 8003670:	4770      	bx	lr
	...

08003674 <_free_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	4605      	mov	r5, r0
 8003678:	2900      	cmp	r1, #0
 800367a:	d041      	beq.n	8003700 <_free_r+0x8c>
 800367c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003680:	1f0c      	subs	r4, r1, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	bfb8      	it	lt
 8003686:	18e4      	addlt	r4, r4, r3
 8003688:	f000 f8e0 	bl	800384c <__malloc_lock>
 800368c:	4a1d      	ldr	r2, [pc, #116]	@ (8003704 <_free_r+0x90>)
 800368e:	6813      	ldr	r3, [r2, #0]
 8003690:	b933      	cbnz	r3, 80036a0 <_free_r+0x2c>
 8003692:	6063      	str	r3, [r4, #4]
 8003694:	6014      	str	r4, [r2, #0]
 8003696:	4628      	mov	r0, r5
 8003698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800369c:	f000 b8dc 	b.w	8003858 <__malloc_unlock>
 80036a0:	42a3      	cmp	r3, r4
 80036a2:	d908      	bls.n	80036b6 <_free_r+0x42>
 80036a4:	6820      	ldr	r0, [r4, #0]
 80036a6:	1821      	adds	r1, r4, r0
 80036a8:	428b      	cmp	r3, r1
 80036aa:	bf01      	itttt	eq
 80036ac:	6819      	ldreq	r1, [r3, #0]
 80036ae:	685b      	ldreq	r3, [r3, #4]
 80036b0:	1809      	addeq	r1, r1, r0
 80036b2:	6021      	streq	r1, [r4, #0]
 80036b4:	e7ed      	b.n	8003692 <_free_r+0x1e>
 80036b6:	461a      	mov	r2, r3
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	b10b      	cbz	r3, 80036c0 <_free_r+0x4c>
 80036bc:	42a3      	cmp	r3, r4
 80036be:	d9fa      	bls.n	80036b6 <_free_r+0x42>
 80036c0:	6811      	ldr	r1, [r2, #0]
 80036c2:	1850      	adds	r0, r2, r1
 80036c4:	42a0      	cmp	r0, r4
 80036c6:	d10b      	bne.n	80036e0 <_free_r+0x6c>
 80036c8:	6820      	ldr	r0, [r4, #0]
 80036ca:	4401      	add	r1, r0
 80036cc:	1850      	adds	r0, r2, r1
 80036ce:	4283      	cmp	r3, r0
 80036d0:	6011      	str	r1, [r2, #0]
 80036d2:	d1e0      	bne.n	8003696 <_free_r+0x22>
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	6053      	str	r3, [r2, #4]
 80036da:	4408      	add	r0, r1
 80036dc:	6010      	str	r0, [r2, #0]
 80036de:	e7da      	b.n	8003696 <_free_r+0x22>
 80036e0:	d902      	bls.n	80036e8 <_free_r+0x74>
 80036e2:	230c      	movs	r3, #12
 80036e4:	602b      	str	r3, [r5, #0]
 80036e6:	e7d6      	b.n	8003696 <_free_r+0x22>
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	1821      	adds	r1, r4, r0
 80036ec:	428b      	cmp	r3, r1
 80036ee:	bf04      	itt	eq
 80036f0:	6819      	ldreq	r1, [r3, #0]
 80036f2:	685b      	ldreq	r3, [r3, #4]
 80036f4:	6063      	str	r3, [r4, #4]
 80036f6:	bf04      	itt	eq
 80036f8:	1809      	addeq	r1, r1, r0
 80036fa:	6021      	streq	r1, [r4, #0]
 80036fc:	6054      	str	r4, [r2, #4]
 80036fe:	e7ca      	b.n	8003696 <_free_r+0x22>
 8003700:	bd38      	pop	{r3, r4, r5, pc}
 8003702:	bf00      	nop
 8003704:	2000026c 	.word	0x2000026c

08003708 <sbrk_aligned>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	4e0f      	ldr	r6, [pc, #60]	@ (8003748 <sbrk_aligned+0x40>)
 800370c:	460c      	mov	r4, r1
 800370e:	6831      	ldr	r1, [r6, #0]
 8003710:	4605      	mov	r5, r0
 8003712:	b911      	cbnz	r1, 800371a <sbrk_aligned+0x12>
 8003714:	f000 fcb4 	bl	8004080 <_sbrk_r>
 8003718:	6030      	str	r0, [r6, #0]
 800371a:	4621      	mov	r1, r4
 800371c:	4628      	mov	r0, r5
 800371e:	f000 fcaf 	bl	8004080 <_sbrk_r>
 8003722:	1c43      	adds	r3, r0, #1
 8003724:	d103      	bne.n	800372e <sbrk_aligned+0x26>
 8003726:	f04f 34ff 	mov.w	r4, #4294967295
 800372a:	4620      	mov	r0, r4
 800372c:	bd70      	pop	{r4, r5, r6, pc}
 800372e:	1cc4      	adds	r4, r0, #3
 8003730:	f024 0403 	bic.w	r4, r4, #3
 8003734:	42a0      	cmp	r0, r4
 8003736:	d0f8      	beq.n	800372a <sbrk_aligned+0x22>
 8003738:	1a21      	subs	r1, r4, r0
 800373a:	4628      	mov	r0, r5
 800373c:	f000 fca0 	bl	8004080 <_sbrk_r>
 8003740:	3001      	adds	r0, #1
 8003742:	d1f2      	bne.n	800372a <sbrk_aligned+0x22>
 8003744:	e7ef      	b.n	8003726 <sbrk_aligned+0x1e>
 8003746:	bf00      	nop
 8003748:	20000268 	.word	0x20000268

0800374c <_malloc_r>:
 800374c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003750:	1ccd      	adds	r5, r1, #3
 8003752:	f025 0503 	bic.w	r5, r5, #3
 8003756:	3508      	adds	r5, #8
 8003758:	2d0c      	cmp	r5, #12
 800375a:	bf38      	it	cc
 800375c:	250c      	movcc	r5, #12
 800375e:	2d00      	cmp	r5, #0
 8003760:	4606      	mov	r6, r0
 8003762:	db01      	blt.n	8003768 <_malloc_r+0x1c>
 8003764:	42a9      	cmp	r1, r5
 8003766:	d904      	bls.n	8003772 <_malloc_r+0x26>
 8003768:	230c      	movs	r3, #12
 800376a:	6033      	str	r3, [r6, #0]
 800376c:	2000      	movs	r0, #0
 800376e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003772:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003848 <_malloc_r+0xfc>
 8003776:	f000 f869 	bl	800384c <__malloc_lock>
 800377a:	f8d8 3000 	ldr.w	r3, [r8]
 800377e:	461c      	mov	r4, r3
 8003780:	bb44      	cbnz	r4, 80037d4 <_malloc_r+0x88>
 8003782:	4629      	mov	r1, r5
 8003784:	4630      	mov	r0, r6
 8003786:	f7ff ffbf 	bl	8003708 <sbrk_aligned>
 800378a:	1c43      	adds	r3, r0, #1
 800378c:	4604      	mov	r4, r0
 800378e:	d158      	bne.n	8003842 <_malloc_r+0xf6>
 8003790:	f8d8 4000 	ldr.w	r4, [r8]
 8003794:	4627      	mov	r7, r4
 8003796:	2f00      	cmp	r7, #0
 8003798:	d143      	bne.n	8003822 <_malloc_r+0xd6>
 800379a:	2c00      	cmp	r4, #0
 800379c:	d04b      	beq.n	8003836 <_malloc_r+0xea>
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	4639      	mov	r1, r7
 80037a2:	4630      	mov	r0, r6
 80037a4:	eb04 0903 	add.w	r9, r4, r3
 80037a8:	f000 fc6a 	bl	8004080 <_sbrk_r>
 80037ac:	4581      	cmp	r9, r0
 80037ae:	d142      	bne.n	8003836 <_malloc_r+0xea>
 80037b0:	6821      	ldr	r1, [r4, #0]
 80037b2:	1a6d      	subs	r5, r5, r1
 80037b4:	4629      	mov	r1, r5
 80037b6:	4630      	mov	r0, r6
 80037b8:	f7ff ffa6 	bl	8003708 <sbrk_aligned>
 80037bc:	3001      	adds	r0, #1
 80037be:	d03a      	beq.n	8003836 <_malloc_r+0xea>
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	442b      	add	r3, r5
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	f8d8 3000 	ldr.w	r3, [r8]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	bb62      	cbnz	r2, 8003828 <_malloc_r+0xdc>
 80037ce:	f8c8 7000 	str.w	r7, [r8]
 80037d2:	e00f      	b.n	80037f4 <_malloc_r+0xa8>
 80037d4:	6822      	ldr	r2, [r4, #0]
 80037d6:	1b52      	subs	r2, r2, r5
 80037d8:	d420      	bmi.n	800381c <_malloc_r+0xd0>
 80037da:	2a0b      	cmp	r2, #11
 80037dc:	d917      	bls.n	800380e <_malloc_r+0xc2>
 80037de:	1961      	adds	r1, r4, r5
 80037e0:	42a3      	cmp	r3, r4
 80037e2:	6025      	str	r5, [r4, #0]
 80037e4:	bf18      	it	ne
 80037e6:	6059      	strne	r1, [r3, #4]
 80037e8:	6863      	ldr	r3, [r4, #4]
 80037ea:	bf08      	it	eq
 80037ec:	f8c8 1000 	streq.w	r1, [r8]
 80037f0:	5162      	str	r2, [r4, r5]
 80037f2:	604b      	str	r3, [r1, #4]
 80037f4:	4630      	mov	r0, r6
 80037f6:	f000 f82f 	bl	8003858 <__malloc_unlock>
 80037fa:	f104 000b 	add.w	r0, r4, #11
 80037fe:	1d23      	adds	r3, r4, #4
 8003800:	f020 0007 	bic.w	r0, r0, #7
 8003804:	1ac2      	subs	r2, r0, r3
 8003806:	bf1c      	itt	ne
 8003808:	1a1b      	subne	r3, r3, r0
 800380a:	50a3      	strne	r3, [r4, r2]
 800380c:	e7af      	b.n	800376e <_malloc_r+0x22>
 800380e:	6862      	ldr	r2, [r4, #4]
 8003810:	42a3      	cmp	r3, r4
 8003812:	bf0c      	ite	eq
 8003814:	f8c8 2000 	streq.w	r2, [r8]
 8003818:	605a      	strne	r2, [r3, #4]
 800381a:	e7eb      	b.n	80037f4 <_malloc_r+0xa8>
 800381c:	4623      	mov	r3, r4
 800381e:	6864      	ldr	r4, [r4, #4]
 8003820:	e7ae      	b.n	8003780 <_malloc_r+0x34>
 8003822:	463c      	mov	r4, r7
 8003824:	687f      	ldr	r7, [r7, #4]
 8003826:	e7b6      	b.n	8003796 <_malloc_r+0x4a>
 8003828:	461a      	mov	r2, r3
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	42a3      	cmp	r3, r4
 800382e:	d1fb      	bne.n	8003828 <_malloc_r+0xdc>
 8003830:	2300      	movs	r3, #0
 8003832:	6053      	str	r3, [r2, #4]
 8003834:	e7de      	b.n	80037f4 <_malloc_r+0xa8>
 8003836:	230c      	movs	r3, #12
 8003838:	6033      	str	r3, [r6, #0]
 800383a:	4630      	mov	r0, r6
 800383c:	f000 f80c 	bl	8003858 <__malloc_unlock>
 8003840:	e794      	b.n	800376c <_malloc_r+0x20>
 8003842:	6005      	str	r5, [r0, #0]
 8003844:	e7d6      	b.n	80037f4 <_malloc_r+0xa8>
 8003846:	bf00      	nop
 8003848:	2000026c 	.word	0x2000026c

0800384c <__malloc_lock>:
 800384c:	4801      	ldr	r0, [pc, #4]	@ (8003854 <__malloc_lock+0x8>)
 800384e:	f7ff bf0e 	b.w	800366e <__retarget_lock_acquire_recursive>
 8003852:	bf00      	nop
 8003854:	20000264 	.word	0x20000264

08003858 <__malloc_unlock>:
 8003858:	4801      	ldr	r0, [pc, #4]	@ (8003860 <__malloc_unlock+0x8>)
 800385a:	f7ff bf09 	b.w	8003670 <__retarget_lock_release_recursive>
 800385e:	bf00      	nop
 8003860:	20000264 	.word	0x20000264

08003864 <__sfputc_r>:
 8003864:	6893      	ldr	r3, [r2, #8]
 8003866:	3b01      	subs	r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	b410      	push	{r4}
 800386c:	6093      	str	r3, [r2, #8]
 800386e:	da08      	bge.n	8003882 <__sfputc_r+0x1e>
 8003870:	6994      	ldr	r4, [r2, #24]
 8003872:	42a3      	cmp	r3, r4
 8003874:	db01      	blt.n	800387a <__sfputc_r+0x16>
 8003876:	290a      	cmp	r1, #10
 8003878:	d103      	bne.n	8003882 <__sfputc_r+0x1e>
 800387a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800387e:	f000 bb6b 	b.w	8003f58 <__swbuf_r>
 8003882:	6813      	ldr	r3, [r2, #0]
 8003884:	1c58      	adds	r0, r3, #1
 8003886:	6010      	str	r0, [r2, #0]
 8003888:	7019      	strb	r1, [r3, #0]
 800388a:	4608      	mov	r0, r1
 800388c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003890:	4770      	bx	lr

08003892 <__sfputs_r>:
 8003892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003894:	4606      	mov	r6, r0
 8003896:	460f      	mov	r7, r1
 8003898:	4614      	mov	r4, r2
 800389a:	18d5      	adds	r5, r2, r3
 800389c:	42ac      	cmp	r4, r5
 800389e:	d101      	bne.n	80038a4 <__sfputs_r+0x12>
 80038a0:	2000      	movs	r0, #0
 80038a2:	e007      	b.n	80038b4 <__sfputs_r+0x22>
 80038a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038a8:	463a      	mov	r2, r7
 80038aa:	4630      	mov	r0, r6
 80038ac:	f7ff ffda 	bl	8003864 <__sfputc_r>
 80038b0:	1c43      	adds	r3, r0, #1
 80038b2:	d1f3      	bne.n	800389c <__sfputs_r+0xa>
 80038b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038b8 <_vfiprintf_r>:
 80038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	460d      	mov	r5, r1
 80038be:	b09d      	sub	sp, #116	@ 0x74
 80038c0:	4614      	mov	r4, r2
 80038c2:	4698      	mov	r8, r3
 80038c4:	4606      	mov	r6, r0
 80038c6:	b118      	cbz	r0, 80038d0 <_vfiprintf_r+0x18>
 80038c8:	6a03      	ldr	r3, [r0, #32]
 80038ca:	b90b      	cbnz	r3, 80038d0 <_vfiprintf_r+0x18>
 80038cc:	f7ff fdca 	bl	8003464 <__sinit>
 80038d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80038d2:	07d9      	lsls	r1, r3, #31
 80038d4:	d405      	bmi.n	80038e2 <_vfiprintf_r+0x2a>
 80038d6:	89ab      	ldrh	r3, [r5, #12]
 80038d8:	059a      	lsls	r2, r3, #22
 80038da:	d402      	bmi.n	80038e2 <_vfiprintf_r+0x2a>
 80038dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80038de:	f7ff fec6 	bl	800366e <__retarget_lock_acquire_recursive>
 80038e2:	89ab      	ldrh	r3, [r5, #12]
 80038e4:	071b      	lsls	r3, r3, #28
 80038e6:	d501      	bpl.n	80038ec <_vfiprintf_r+0x34>
 80038e8:	692b      	ldr	r3, [r5, #16]
 80038ea:	b99b      	cbnz	r3, 8003914 <_vfiprintf_r+0x5c>
 80038ec:	4629      	mov	r1, r5
 80038ee:	4630      	mov	r0, r6
 80038f0:	f000 fb70 	bl	8003fd4 <__swsetup_r>
 80038f4:	b170      	cbz	r0, 8003914 <_vfiprintf_r+0x5c>
 80038f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80038f8:	07dc      	lsls	r4, r3, #31
 80038fa:	d504      	bpl.n	8003906 <_vfiprintf_r+0x4e>
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	b01d      	add	sp, #116	@ 0x74
 8003902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003906:	89ab      	ldrh	r3, [r5, #12]
 8003908:	0598      	lsls	r0, r3, #22
 800390a:	d4f7      	bmi.n	80038fc <_vfiprintf_r+0x44>
 800390c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800390e:	f7ff feaf 	bl	8003670 <__retarget_lock_release_recursive>
 8003912:	e7f3      	b.n	80038fc <_vfiprintf_r+0x44>
 8003914:	2300      	movs	r3, #0
 8003916:	9309      	str	r3, [sp, #36]	@ 0x24
 8003918:	2320      	movs	r3, #32
 800391a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800391e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003922:	2330      	movs	r3, #48	@ 0x30
 8003924:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003ad4 <_vfiprintf_r+0x21c>
 8003928:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800392c:	f04f 0901 	mov.w	r9, #1
 8003930:	4623      	mov	r3, r4
 8003932:	469a      	mov	sl, r3
 8003934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003938:	b10a      	cbz	r2, 800393e <_vfiprintf_r+0x86>
 800393a:	2a25      	cmp	r2, #37	@ 0x25
 800393c:	d1f9      	bne.n	8003932 <_vfiprintf_r+0x7a>
 800393e:	ebba 0b04 	subs.w	fp, sl, r4
 8003942:	d00b      	beq.n	800395c <_vfiprintf_r+0xa4>
 8003944:	465b      	mov	r3, fp
 8003946:	4622      	mov	r2, r4
 8003948:	4629      	mov	r1, r5
 800394a:	4630      	mov	r0, r6
 800394c:	f7ff ffa1 	bl	8003892 <__sfputs_r>
 8003950:	3001      	adds	r0, #1
 8003952:	f000 80a7 	beq.w	8003aa4 <_vfiprintf_r+0x1ec>
 8003956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003958:	445a      	add	r2, fp
 800395a:	9209      	str	r2, [sp, #36]	@ 0x24
 800395c:	f89a 3000 	ldrb.w	r3, [sl]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 809f 	beq.w	8003aa4 <_vfiprintf_r+0x1ec>
 8003966:	2300      	movs	r3, #0
 8003968:	f04f 32ff 	mov.w	r2, #4294967295
 800396c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003970:	f10a 0a01 	add.w	sl, sl, #1
 8003974:	9304      	str	r3, [sp, #16]
 8003976:	9307      	str	r3, [sp, #28]
 8003978:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800397c:	931a      	str	r3, [sp, #104]	@ 0x68
 800397e:	4654      	mov	r4, sl
 8003980:	2205      	movs	r2, #5
 8003982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003986:	4853      	ldr	r0, [pc, #332]	@ (8003ad4 <_vfiprintf_r+0x21c>)
 8003988:	f7fc fc2a 	bl	80001e0 <memchr>
 800398c:	9a04      	ldr	r2, [sp, #16]
 800398e:	b9d8      	cbnz	r0, 80039c8 <_vfiprintf_r+0x110>
 8003990:	06d1      	lsls	r1, r2, #27
 8003992:	bf44      	itt	mi
 8003994:	2320      	movmi	r3, #32
 8003996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800399a:	0713      	lsls	r3, r2, #28
 800399c:	bf44      	itt	mi
 800399e:	232b      	movmi	r3, #43	@ 0x2b
 80039a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039a4:	f89a 3000 	ldrb.w	r3, [sl]
 80039a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80039aa:	d015      	beq.n	80039d8 <_vfiprintf_r+0x120>
 80039ac:	9a07      	ldr	r2, [sp, #28]
 80039ae:	4654      	mov	r4, sl
 80039b0:	2000      	movs	r0, #0
 80039b2:	f04f 0c0a 	mov.w	ip, #10
 80039b6:	4621      	mov	r1, r4
 80039b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039bc:	3b30      	subs	r3, #48	@ 0x30
 80039be:	2b09      	cmp	r3, #9
 80039c0:	d94b      	bls.n	8003a5a <_vfiprintf_r+0x1a2>
 80039c2:	b1b0      	cbz	r0, 80039f2 <_vfiprintf_r+0x13a>
 80039c4:	9207      	str	r2, [sp, #28]
 80039c6:	e014      	b.n	80039f2 <_vfiprintf_r+0x13a>
 80039c8:	eba0 0308 	sub.w	r3, r0, r8
 80039cc:	fa09 f303 	lsl.w	r3, r9, r3
 80039d0:	4313      	orrs	r3, r2
 80039d2:	9304      	str	r3, [sp, #16]
 80039d4:	46a2      	mov	sl, r4
 80039d6:	e7d2      	b.n	800397e <_vfiprintf_r+0xc6>
 80039d8:	9b03      	ldr	r3, [sp, #12]
 80039da:	1d19      	adds	r1, r3, #4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	9103      	str	r1, [sp, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bfbb      	ittet	lt
 80039e4:	425b      	neglt	r3, r3
 80039e6:	f042 0202 	orrlt.w	r2, r2, #2
 80039ea:	9307      	strge	r3, [sp, #28]
 80039ec:	9307      	strlt	r3, [sp, #28]
 80039ee:	bfb8      	it	lt
 80039f0:	9204      	strlt	r2, [sp, #16]
 80039f2:	7823      	ldrb	r3, [r4, #0]
 80039f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80039f6:	d10a      	bne.n	8003a0e <_vfiprintf_r+0x156>
 80039f8:	7863      	ldrb	r3, [r4, #1]
 80039fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80039fc:	d132      	bne.n	8003a64 <_vfiprintf_r+0x1ac>
 80039fe:	9b03      	ldr	r3, [sp, #12]
 8003a00:	1d1a      	adds	r2, r3, #4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	9203      	str	r2, [sp, #12]
 8003a06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a0a:	3402      	adds	r4, #2
 8003a0c:	9305      	str	r3, [sp, #20]
 8003a0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003ae4 <_vfiprintf_r+0x22c>
 8003a12:	7821      	ldrb	r1, [r4, #0]
 8003a14:	2203      	movs	r2, #3
 8003a16:	4650      	mov	r0, sl
 8003a18:	f7fc fbe2 	bl	80001e0 <memchr>
 8003a1c:	b138      	cbz	r0, 8003a2e <_vfiprintf_r+0x176>
 8003a1e:	9b04      	ldr	r3, [sp, #16]
 8003a20:	eba0 000a 	sub.w	r0, r0, sl
 8003a24:	2240      	movs	r2, #64	@ 0x40
 8003a26:	4082      	lsls	r2, r0
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	3401      	adds	r4, #1
 8003a2c:	9304      	str	r3, [sp, #16]
 8003a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a32:	4829      	ldr	r0, [pc, #164]	@ (8003ad8 <_vfiprintf_r+0x220>)
 8003a34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a38:	2206      	movs	r2, #6
 8003a3a:	f7fc fbd1 	bl	80001e0 <memchr>
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d03f      	beq.n	8003ac2 <_vfiprintf_r+0x20a>
 8003a42:	4b26      	ldr	r3, [pc, #152]	@ (8003adc <_vfiprintf_r+0x224>)
 8003a44:	bb1b      	cbnz	r3, 8003a8e <_vfiprintf_r+0x1d6>
 8003a46:	9b03      	ldr	r3, [sp, #12]
 8003a48:	3307      	adds	r3, #7
 8003a4a:	f023 0307 	bic.w	r3, r3, #7
 8003a4e:	3308      	adds	r3, #8
 8003a50:	9303      	str	r3, [sp, #12]
 8003a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a54:	443b      	add	r3, r7
 8003a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a58:	e76a      	b.n	8003930 <_vfiprintf_r+0x78>
 8003a5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a5e:	460c      	mov	r4, r1
 8003a60:	2001      	movs	r0, #1
 8003a62:	e7a8      	b.n	80039b6 <_vfiprintf_r+0xfe>
 8003a64:	2300      	movs	r3, #0
 8003a66:	3401      	adds	r4, #1
 8003a68:	9305      	str	r3, [sp, #20]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	f04f 0c0a 	mov.w	ip, #10
 8003a70:	4620      	mov	r0, r4
 8003a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a76:	3a30      	subs	r2, #48	@ 0x30
 8003a78:	2a09      	cmp	r2, #9
 8003a7a:	d903      	bls.n	8003a84 <_vfiprintf_r+0x1cc>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0c6      	beq.n	8003a0e <_vfiprintf_r+0x156>
 8003a80:	9105      	str	r1, [sp, #20]
 8003a82:	e7c4      	b.n	8003a0e <_vfiprintf_r+0x156>
 8003a84:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a88:	4604      	mov	r4, r0
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e7f0      	b.n	8003a70 <_vfiprintf_r+0x1b8>
 8003a8e:	ab03      	add	r3, sp, #12
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	462a      	mov	r2, r5
 8003a94:	4b12      	ldr	r3, [pc, #72]	@ (8003ae0 <_vfiprintf_r+0x228>)
 8003a96:	a904      	add	r1, sp, #16
 8003a98:	4630      	mov	r0, r6
 8003a9a:	f3af 8000 	nop.w
 8003a9e:	4607      	mov	r7, r0
 8003aa0:	1c78      	adds	r0, r7, #1
 8003aa2:	d1d6      	bne.n	8003a52 <_vfiprintf_r+0x19a>
 8003aa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003aa6:	07d9      	lsls	r1, r3, #31
 8003aa8:	d405      	bmi.n	8003ab6 <_vfiprintf_r+0x1fe>
 8003aaa:	89ab      	ldrh	r3, [r5, #12]
 8003aac:	059a      	lsls	r2, r3, #22
 8003aae:	d402      	bmi.n	8003ab6 <_vfiprintf_r+0x1fe>
 8003ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ab2:	f7ff fddd 	bl	8003670 <__retarget_lock_release_recursive>
 8003ab6:	89ab      	ldrh	r3, [r5, #12]
 8003ab8:	065b      	lsls	r3, r3, #25
 8003aba:	f53f af1f 	bmi.w	80038fc <_vfiprintf_r+0x44>
 8003abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ac0:	e71e      	b.n	8003900 <_vfiprintf_r+0x48>
 8003ac2:	ab03      	add	r3, sp, #12
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	462a      	mov	r2, r5
 8003ac8:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <_vfiprintf_r+0x228>)
 8003aca:	a904      	add	r1, sp, #16
 8003acc:	4630      	mov	r0, r6
 8003ace:	f000 f879 	bl	8003bc4 <_printf_i>
 8003ad2:	e7e4      	b.n	8003a9e <_vfiprintf_r+0x1e6>
 8003ad4:	08004250 	.word	0x08004250
 8003ad8:	0800425a 	.word	0x0800425a
 8003adc:	00000000 	.word	0x00000000
 8003ae0:	08003893 	.word	0x08003893
 8003ae4:	08004256 	.word	0x08004256

08003ae8 <_printf_common>:
 8003ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aec:	4616      	mov	r6, r2
 8003aee:	4698      	mov	r8, r3
 8003af0:	688a      	ldr	r2, [r1, #8]
 8003af2:	690b      	ldr	r3, [r1, #16]
 8003af4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003af8:	4293      	cmp	r3, r2
 8003afa:	bfb8      	it	lt
 8003afc:	4613      	movlt	r3, r2
 8003afe:	6033      	str	r3, [r6, #0]
 8003b00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b04:	4607      	mov	r7, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	b10a      	cbz	r2, 8003b0e <_printf_common+0x26>
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	6033      	str	r3, [r6, #0]
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	0699      	lsls	r1, r3, #26
 8003b12:	bf42      	ittt	mi
 8003b14:	6833      	ldrmi	r3, [r6, #0]
 8003b16:	3302      	addmi	r3, #2
 8003b18:	6033      	strmi	r3, [r6, #0]
 8003b1a:	6825      	ldr	r5, [r4, #0]
 8003b1c:	f015 0506 	ands.w	r5, r5, #6
 8003b20:	d106      	bne.n	8003b30 <_printf_common+0x48>
 8003b22:	f104 0a19 	add.w	sl, r4, #25
 8003b26:	68e3      	ldr	r3, [r4, #12]
 8003b28:	6832      	ldr	r2, [r6, #0]
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	42ab      	cmp	r3, r5
 8003b2e:	dc26      	bgt.n	8003b7e <_printf_common+0x96>
 8003b30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b34:	6822      	ldr	r2, [r4, #0]
 8003b36:	3b00      	subs	r3, #0
 8003b38:	bf18      	it	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	0692      	lsls	r2, r2, #26
 8003b3e:	d42b      	bmi.n	8003b98 <_printf_common+0xb0>
 8003b40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b44:	4641      	mov	r1, r8
 8003b46:	4638      	mov	r0, r7
 8003b48:	47c8      	blx	r9
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	d01e      	beq.n	8003b8c <_printf_common+0xa4>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	6922      	ldr	r2, [r4, #16]
 8003b52:	f003 0306 	and.w	r3, r3, #6
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	bf02      	ittt	eq
 8003b5a:	68e5      	ldreq	r5, [r4, #12]
 8003b5c:	6833      	ldreq	r3, [r6, #0]
 8003b5e:	1aed      	subeq	r5, r5, r3
 8003b60:	68a3      	ldr	r3, [r4, #8]
 8003b62:	bf0c      	ite	eq
 8003b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b68:	2500      	movne	r5, #0
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	bfc4      	itt	gt
 8003b6e:	1a9b      	subgt	r3, r3, r2
 8003b70:	18ed      	addgt	r5, r5, r3
 8003b72:	2600      	movs	r6, #0
 8003b74:	341a      	adds	r4, #26
 8003b76:	42b5      	cmp	r5, r6
 8003b78:	d11a      	bne.n	8003bb0 <_printf_common+0xc8>
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	e008      	b.n	8003b90 <_printf_common+0xa8>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	4652      	mov	r2, sl
 8003b82:	4641      	mov	r1, r8
 8003b84:	4638      	mov	r0, r7
 8003b86:	47c8      	blx	r9
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d103      	bne.n	8003b94 <_printf_common+0xac>
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b94:	3501      	adds	r5, #1
 8003b96:	e7c6      	b.n	8003b26 <_printf_common+0x3e>
 8003b98:	18e1      	adds	r1, r4, r3
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	2030      	movs	r0, #48	@ 0x30
 8003b9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ba2:	4422      	add	r2, r4
 8003ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bac:	3302      	adds	r3, #2
 8003bae:	e7c7      	b.n	8003b40 <_printf_common+0x58>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	4622      	mov	r2, r4
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	47c8      	blx	r9
 8003bba:	3001      	adds	r0, #1
 8003bbc:	d0e6      	beq.n	8003b8c <_printf_common+0xa4>
 8003bbe:	3601      	adds	r6, #1
 8003bc0:	e7d9      	b.n	8003b76 <_printf_common+0x8e>
	...

08003bc4 <_printf_i>:
 8003bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc8:	7e0f      	ldrb	r7, [r1, #24]
 8003bca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bcc:	2f78      	cmp	r7, #120	@ 0x78
 8003bce:	4691      	mov	r9, r2
 8003bd0:	4680      	mov	r8, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	469a      	mov	sl, r3
 8003bd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bda:	d807      	bhi.n	8003bec <_printf_i+0x28>
 8003bdc:	2f62      	cmp	r7, #98	@ 0x62
 8003bde:	d80a      	bhi.n	8003bf6 <_printf_i+0x32>
 8003be0:	2f00      	cmp	r7, #0
 8003be2:	f000 80d1 	beq.w	8003d88 <_printf_i+0x1c4>
 8003be6:	2f58      	cmp	r7, #88	@ 0x58
 8003be8:	f000 80b8 	beq.w	8003d5c <_printf_i+0x198>
 8003bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bf4:	e03a      	b.n	8003c6c <_printf_i+0xa8>
 8003bf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bfa:	2b15      	cmp	r3, #21
 8003bfc:	d8f6      	bhi.n	8003bec <_printf_i+0x28>
 8003bfe:	a101      	add	r1, pc, #4	@ (adr r1, 8003c04 <_printf_i+0x40>)
 8003c00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c04:	08003c5d 	.word	0x08003c5d
 8003c08:	08003c71 	.word	0x08003c71
 8003c0c:	08003bed 	.word	0x08003bed
 8003c10:	08003bed 	.word	0x08003bed
 8003c14:	08003bed 	.word	0x08003bed
 8003c18:	08003bed 	.word	0x08003bed
 8003c1c:	08003c71 	.word	0x08003c71
 8003c20:	08003bed 	.word	0x08003bed
 8003c24:	08003bed 	.word	0x08003bed
 8003c28:	08003bed 	.word	0x08003bed
 8003c2c:	08003bed 	.word	0x08003bed
 8003c30:	08003d6f 	.word	0x08003d6f
 8003c34:	08003c9b 	.word	0x08003c9b
 8003c38:	08003d29 	.word	0x08003d29
 8003c3c:	08003bed 	.word	0x08003bed
 8003c40:	08003bed 	.word	0x08003bed
 8003c44:	08003d91 	.word	0x08003d91
 8003c48:	08003bed 	.word	0x08003bed
 8003c4c:	08003c9b 	.word	0x08003c9b
 8003c50:	08003bed 	.word	0x08003bed
 8003c54:	08003bed 	.word	0x08003bed
 8003c58:	08003d31 	.word	0x08003d31
 8003c5c:	6833      	ldr	r3, [r6, #0]
 8003c5e:	1d1a      	adds	r2, r3, #4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6032      	str	r2, [r6, #0]
 8003c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e09c      	b.n	8003daa <_printf_i+0x1e6>
 8003c70:	6833      	ldr	r3, [r6, #0]
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	1d19      	adds	r1, r3, #4
 8003c76:	6031      	str	r1, [r6, #0]
 8003c78:	0606      	lsls	r6, r0, #24
 8003c7a:	d501      	bpl.n	8003c80 <_printf_i+0xbc>
 8003c7c:	681d      	ldr	r5, [r3, #0]
 8003c7e:	e003      	b.n	8003c88 <_printf_i+0xc4>
 8003c80:	0645      	lsls	r5, r0, #25
 8003c82:	d5fb      	bpl.n	8003c7c <_printf_i+0xb8>
 8003c84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c88:	2d00      	cmp	r5, #0
 8003c8a:	da03      	bge.n	8003c94 <_printf_i+0xd0>
 8003c8c:	232d      	movs	r3, #45	@ 0x2d
 8003c8e:	426d      	negs	r5, r5
 8003c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c94:	4858      	ldr	r0, [pc, #352]	@ (8003df8 <_printf_i+0x234>)
 8003c96:	230a      	movs	r3, #10
 8003c98:	e011      	b.n	8003cbe <_printf_i+0xfa>
 8003c9a:	6821      	ldr	r1, [r4, #0]
 8003c9c:	6833      	ldr	r3, [r6, #0]
 8003c9e:	0608      	lsls	r0, r1, #24
 8003ca0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ca4:	d402      	bmi.n	8003cac <_printf_i+0xe8>
 8003ca6:	0649      	lsls	r1, r1, #25
 8003ca8:	bf48      	it	mi
 8003caa:	b2ad      	uxthmi	r5, r5
 8003cac:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cae:	4852      	ldr	r0, [pc, #328]	@ (8003df8 <_printf_i+0x234>)
 8003cb0:	6033      	str	r3, [r6, #0]
 8003cb2:	bf14      	ite	ne
 8003cb4:	230a      	movne	r3, #10
 8003cb6:	2308      	moveq	r3, #8
 8003cb8:	2100      	movs	r1, #0
 8003cba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cbe:	6866      	ldr	r6, [r4, #4]
 8003cc0:	60a6      	str	r6, [r4, #8]
 8003cc2:	2e00      	cmp	r6, #0
 8003cc4:	db05      	blt.n	8003cd2 <_printf_i+0x10e>
 8003cc6:	6821      	ldr	r1, [r4, #0]
 8003cc8:	432e      	orrs	r6, r5
 8003cca:	f021 0104 	bic.w	r1, r1, #4
 8003cce:	6021      	str	r1, [r4, #0]
 8003cd0:	d04b      	beq.n	8003d6a <_printf_i+0x1a6>
 8003cd2:	4616      	mov	r6, r2
 8003cd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cd8:	fb03 5711 	mls	r7, r3, r1, r5
 8003cdc:	5dc7      	ldrb	r7, [r0, r7]
 8003cde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ce2:	462f      	mov	r7, r5
 8003ce4:	42bb      	cmp	r3, r7
 8003ce6:	460d      	mov	r5, r1
 8003ce8:	d9f4      	bls.n	8003cd4 <_printf_i+0x110>
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d10b      	bne.n	8003d06 <_printf_i+0x142>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	07df      	lsls	r7, r3, #31
 8003cf2:	d508      	bpl.n	8003d06 <_printf_i+0x142>
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	6861      	ldr	r1, [r4, #4]
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	bfde      	ittt	le
 8003cfc:	2330      	movle	r3, #48	@ 0x30
 8003cfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d06:	1b92      	subs	r2, r2, r6
 8003d08:	6122      	str	r2, [r4, #16]
 8003d0a:	f8cd a000 	str.w	sl, [sp]
 8003d0e:	464b      	mov	r3, r9
 8003d10:	aa03      	add	r2, sp, #12
 8003d12:	4621      	mov	r1, r4
 8003d14:	4640      	mov	r0, r8
 8003d16:	f7ff fee7 	bl	8003ae8 <_printf_common>
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	d14a      	bne.n	8003db4 <_printf_i+0x1f0>
 8003d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d22:	b004      	add	sp, #16
 8003d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	f043 0320 	orr.w	r3, r3, #32
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	4832      	ldr	r0, [pc, #200]	@ (8003dfc <_printf_i+0x238>)
 8003d32:	2778      	movs	r7, #120	@ 0x78
 8003d34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	6831      	ldr	r1, [r6, #0]
 8003d3c:	061f      	lsls	r7, r3, #24
 8003d3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d42:	d402      	bmi.n	8003d4a <_printf_i+0x186>
 8003d44:	065f      	lsls	r7, r3, #25
 8003d46:	bf48      	it	mi
 8003d48:	b2ad      	uxthmi	r5, r5
 8003d4a:	6031      	str	r1, [r6, #0]
 8003d4c:	07d9      	lsls	r1, r3, #31
 8003d4e:	bf44      	itt	mi
 8003d50:	f043 0320 	orrmi.w	r3, r3, #32
 8003d54:	6023      	strmi	r3, [r4, #0]
 8003d56:	b11d      	cbz	r5, 8003d60 <_printf_i+0x19c>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	e7ad      	b.n	8003cb8 <_printf_i+0xf4>
 8003d5c:	4826      	ldr	r0, [pc, #152]	@ (8003df8 <_printf_i+0x234>)
 8003d5e:	e7e9      	b.n	8003d34 <_printf_i+0x170>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	f023 0320 	bic.w	r3, r3, #32
 8003d66:	6023      	str	r3, [r4, #0]
 8003d68:	e7f6      	b.n	8003d58 <_printf_i+0x194>
 8003d6a:	4616      	mov	r6, r2
 8003d6c:	e7bd      	b.n	8003cea <_printf_i+0x126>
 8003d6e:	6833      	ldr	r3, [r6, #0]
 8003d70:	6825      	ldr	r5, [r4, #0]
 8003d72:	6961      	ldr	r1, [r4, #20]
 8003d74:	1d18      	adds	r0, r3, #4
 8003d76:	6030      	str	r0, [r6, #0]
 8003d78:	062e      	lsls	r6, r5, #24
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	d501      	bpl.n	8003d82 <_printf_i+0x1be>
 8003d7e:	6019      	str	r1, [r3, #0]
 8003d80:	e002      	b.n	8003d88 <_printf_i+0x1c4>
 8003d82:	0668      	lsls	r0, r5, #25
 8003d84:	d5fb      	bpl.n	8003d7e <_printf_i+0x1ba>
 8003d86:	8019      	strh	r1, [r3, #0]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	6123      	str	r3, [r4, #16]
 8003d8c:	4616      	mov	r6, r2
 8003d8e:	e7bc      	b.n	8003d0a <_printf_i+0x146>
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	1d1a      	adds	r2, r3, #4
 8003d94:	6032      	str	r2, [r6, #0]
 8003d96:	681e      	ldr	r6, [r3, #0]
 8003d98:	6862      	ldr	r2, [r4, #4]
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f7fc fa1f 	bl	80001e0 <memchr>
 8003da2:	b108      	cbz	r0, 8003da8 <_printf_i+0x1e4>
 8003da4:	1b80      	subs	r0, r0, r6
 8003da6:	6060      	str	r0, [r4, #4]
 8003da8:	6863      	ldr	r3, [r4, #4]
 8003daa:	6123      	str	r3, [r4, #16]
 8003dac:	2300      	movs	r3, #0
 8003dae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db2:	e7aa      	b.n	8003d0a <_printf_i+0x146>
 8003db4:	6923      	ldr	r3, [r4, #16]
 8003db6:	4632      	mov	r2, r6
 8003db8:	4649      	mov	r1, r9
 8003dba:	4640      	mov	r0, r8
 8003dbc:	47d0      	blx	sl
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d0ad      	beq.n	8003d1e <_printf_i+0x15a>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	079b      	lsls	r3, r3, #30
 8003dc6:	d413      	bmi.n	8003df0 <_printf_i+0x22c>
 8003dc8:	68e0      	ldr	r0, [r4, #12]
 8003dca:	9b03      	ldr	r3, [sp, #12]
 8003dcc:	4298      	cmp	r0, r3
 8003dce:	bfb8      	it	lt
 8003dd0:	4618      	movlt	r0, r3
 8003dd2:	e7a6      	b.n	8003d22 <_printf_i+0x15e>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4632      	mov	r2, r6
 8003dd8:	4649      	mov	r1, r9
 8003dda:	4640      	mov	r0, r8
 8003ddc:	47d0      	blx	sl
 8003dde:	3001      	adds	r0, #1
 8003de0:	d09d      	beq.n	8003d1e <_printf_i+0x15a>
 8003de2:	3501      	adds	r5, #1
 8003de4:	68e3      	ldr	r3, [r4, #12]
 8003de6:	9903      	ldr	r1, [sp, #12]
 8003de8:	1a5b      	subs	r3, r3, r1
 8003dea:	42ab      	cmp	r3, r5
 8003dec:	dcf2      	bgt.n	8003dd4 <_printf_i+0x210>
 8003dee:	e7eb      	b.n	8003dc8 <_printf_i+0x204>
 8003df0:	2500      	movs	r5, #0
 8003df2:	f104 0619 	add.w	r6, r4, #25
 8003df6:	e7f5      	b.n	8003de4 <_printf_i+0x220>
 8003df8:	08004261 	.word	0x08004261
 8003dfc:	08004272 	.word	0x08004272

08003e00 <__sflush_r>:
 8003e00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e08:	0716      	lsls	r6, r2, #28
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	d454      	bmi.n	8003eba <__sflush_r+0xba>
 8003e10:	684b      	ldr	r3, [r1, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	dc02      	bgt.n	8003e1c <__sflush_r+0x1c>
 8003e16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	dd48      	ble.n	8003eae <__sflush_r+0xae>
 8003e1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e1e:	2e00      	cmp	r6, #0
 8003e20:	d045      	beq.n	8003eae <__sflush_r+0xae>
 8003e22:	2300      	movs	r3, #0
 8003e24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e28:	682f      	ldr	r7, [r5, #0]
 8003e2a:	6a21      	ldr	r1, [r4, #32]
 8003e2c:	602b      	str	r3, [r5, #0]
 8003e2e:	d030      	beq.n	8003e92 <__sflush_r+0x92>
 8003e30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	0759      	lsls	r1, r3, #29
 8003e36:	d505      	bpl.n	8003e44 <__sflush_r+0x44>
 8003e38:	6863      	ldr	r3, [r4, #4]
 8003e3a:	1ad2      	subs	r2, r2, r3
 8003e3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e3e:	b10b      	cbz	r3, 8003e44 <__sflush_r+0x44>
 8003e40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e42:	1ad2      	subs	r2, r2, r3
 8003e44:	2300      	movs	r3, #0
 8003e46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e48:	6a21      	ldr	r1, [r4, #32]
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	47b0      	blx	r6
 8003e4e:	1c43      	adds	r3, r0, #1
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	d106      	bne.n	8003e62 <__sflush_r+0x62>
 8003e54:	6829      	ldr	r1, [r5, #0]
 8003e56:	291d      	cmp	r1, #29
 8003e58:	d82b      	bhi.n	8003eb2 <__sflush_r+0xb2>
 8003e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f04 <__sflush_r+0x104>)
 8003e5c:	40ca      	lsrs	r2, r1
 8003e5e:	07d6      	lsls	r6, r2, #31
 8003e60:	d527      	bpl.n	8003eb2 <__sflush_r+0xb2>
 8003e62:	2200      	movs	r2, #0
 8003e64:	6062      	str	r2, [r4, #4]
 8003e66:	04d9      	lsls	r1, r3, #19
 8003e68:	6922      	ldr	r2, [r4, #16]
 8003e6a:	6022      	str	r2, [r4, #0]
 8003e6c:	d504      	bpl.n	8003e78 <__sflush_r+0x78>
 8003e6e:	1c42      	adds	r2, r0, #1
 8003e70:	d101      	bne.n	8003e76 <__sflush_r+0x76>
 8003e72:	682b      	ldr	r3, [r5, #0]
 8003e74:	b903      	cbnz	r3, 8003e78 <__sflush_r+0x78>
 8003e76:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e7a:	602f      	str	r7, [r5, #0]
 8003e7c:	b1b9      	cbz	r1, 8003eae <__sflush_r+0xae>
 8003e7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e82:	4299      	cmp	r1, r3
 8003e84:	d002      	beq.n	8003e8c <__sflush_r+0x8c>
 8003e86:	4628      	mov	r0, r5
 8003e88:	f7ff fbf4 	bl	8003674 <_free_r>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e90:	e00d      	b.n	8003eae <__sflush_r+0xae>
 8003e92:	2301      	movs	r3, #1
 8003e94:	4628      	mov	r0, r5
 8003e96:	47b0      	blx	r6
 8003e98:	4602      	mov	r2, r0
 8003e9a:	1c50      	adds	r0, r2, #1
 8003e9c:	d1c9      	bne.n	8003e32 <__sflush_r+0x32>
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0c6      	beq.n	8003e32 <__sflush_r+0x32>
 8003ea4:	2b1d      	cmp	r3, #29
 8003ea6:	d001      	beq.n	8003eac <__sflush_r+0xac>
 8003ea8:	2b16      	cmp	r3, #22
 8003eaa:	d11e      	bne.n	8003eea <__sflush_r+0xea>
 8003eac:	602f      	str	r7, [r5, #0]
 8003eae:	2000      	movs	r0, #0
 8003eb0:	e022      	b.n	8003ef8 <__sflush_r+0xf8>
 8003eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eb6:	b21b      	sxth	r3, r3
 8003eb8:	e01b      	b.n	8003ef2 <__sflush_r+0xf2>
 8003eba:	690f      	ldr	r7, [r1, #16]
 8003ebc:	2f00      	cmp	r7, #0
 8003ebe:	d0f6      	beq.n	8003eae <__sflush_r+0xae>
 8003ec0:	0793      	lsls	r3, r2, #30
 8003ec2:	680e      	ldr	r6, [r1, #0]
 8003ec4:	bf08      	it	eq
 8003ec6:	694b      	ldreq	r3, [r1, #20]
 8003ec8:	600f      	str	r7, [r1, #0]
 8003eca:	bf18      	it	ne
 8003ecc:	2300      	movne	r3, #0
 8003ece:	eba6 0807 	sub.w	r8, r6, r7
 8003ed2:	608b      	str	r3, [r1, #8]
 8003ed4:	f1b8 0f00 	cmp.w	r8, #0
 8003ed8:	dde9      	ble.n	8003eae <__sflush_r+0xae>
 8003eda:	6a21      	ldr	r1, [r4, #32]
 8003edc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003ede:	4643      	mov	r3, r8
 8003ee0:	463a      	mov	r2, r7
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	47b0      	blx	r6
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	dc08      	bgt.n	8003efc <__sflush_r+0xfc>
 8003eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ef2:	81a3      	strh	r3, [r4, #12]
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003efc:	4407      	add	r7, r0
 8003efe:	eba8 0800 	sub.w	r8, r8, r0
 8003f02:	e7e7      	b.n	8003ed4 <__sflush_r+0xd4>
 8003f04:	20400001 	.word	0x20400001

08003f08 <_fflush_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	690b      	ldr	r3, [r1, #16]
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	b913      	cbnz	r3, 8003f18 <_fflush_r+0x10>
 8003f12:	2500      	movs	r5, #0
 8003f14:	4628      	mov	r0, r5
 8003f16:	bd38      	pop	{r3, r4, r5, pc}
 8003f18:	b118      	cbz	r0, 8003f22 <_fflush_r+0x1a>
 8003f1a:	6a03      	ldr	r3, [r0, #32]
 8003f1c:	b90b      	cbnz	r3, 8003f22 <_fflush_r+0x1a>
 8003f1e:	f7ff faa1 	bl	8003464 <__sinit>
 8003f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f3      	beq.n	8003f12 <_fflush_r+0xa>
 8003f2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f2c:	07d0      	lsls	r0, r2, #31
 8003f2e:	d404      	bmi.n	8003f3a <_fflush_r+0x32>
 8003f30:	0599      	lsls	r1, r3, #22
 8003f32:	d402      	bmi.n	8003f3a <_fflush_r+0x32>
 8003f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f36:	f7ff fb9a 	bl	800366e <__retarget_lock_acquire_recursive>
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	f7ff ff5f 	bl	8003e00 <__sflush_r>
 8003f42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f44:	07da      	lsls	r2, r3, #31
 8003f46:	4605      	mov	r5, r0
 8003f48:	d4e4      	bmi.n	8003f14 <_fflush_r+0xc>
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	059b      	lsls	r3, r3, #22
 8003f4e:	d4e1      	bmi.n	8003f14 <_fflush_r+0xc>
 8003f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f52:	f7ff fb8d 	bl	8003670 <__retarget_lock_release_recursive>
 8003f56:	e7dd      	b.n	8003f14 <_fflush_r+0xc>

08003f58 <__swbuf_r>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	460e      	mov	r6, r1
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	4605      	mov	r5, r0
 8003f60:	b118      	cbz	r0, 8003f6a <__swbuf_r+0x12>
 8003f62:	6a03      	ldr	r3, [r0, #32]
 8003f64:	b90b      	cbnz	r3, 8003f6a <__swbuf_r+0x12>
 8003f66:	f7ff fa7d 	bl	8003464 <__sinit>
 8003f6a:	69a3      	ldr	r3, [r4, #24]
 8003f6c:	60a3      	str	r3, [r4, #8]
 8003f6e:	89a3      	ldrh	r3, [r4, #12]
 8003f70:	071a      	lsls	r2, r3, #28
 8003f72:	d501      	bpl.n	8003f78 <__swbuf_r+0x20>
 8003f74:	6923      	ldr	r3, [r4, #16]
 8003f76:	b943      	cbnz	r3, 8003f8a <__swbuf_r+0x32>
 8003f78:	4621      	mov	r1, r4
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f000 f82a 	bl	8003fd4 <__swsetup_r>
 8003f80:	b118      	cbz	r0, 8003f8a <__swbuf_r+0x32>
 8003f82:	f04f 37ff 	mov.w	r7, #4294967295
 8003f86:	4638      	mov	r0, r7
 8003f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	6922      	ldr	r2, [r4, #16]
 8003f8e:	1a98      	subs	r0, r3, r2
 8003f90:	6963      	ldr	r3, [r4, #20]
 8003f92:	b2f6      	uxtb	r6, r6
 8003f94:	4283      	cmp	r3, r0
 8003f96:	4637      	mov	r7, r6
 8003f98:	dc05      	bgt.n	8003fa6 <__swbuf_r+0x4e>
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	f7ff ffb3 	bl	8003f08 <_fflush_r>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d1ed      	bne.n	8003f82 <__swbuf_r+0x2a>
 8003fa6:	68a3      	ldr	r3, [r4, #8]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	60a3      	str	r3, [r4, #8]
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	6022      	str	r2, [r4, #0]
 8003fb2:	701e      	strb	r6, [r3, #0]
 8003fb4:	6962      	ldr	r2, [r4, #20]
 8003fb6:	1c43      	adds	r3, r0, #1
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d004      	beq.n	8003fc6 <__swbuf_r+0x6e>
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	07db      	lsls	r3, r3, #31
 8003fc0:	d5e1      	bpl.n	8003f86 <__swbuf_r+0x2e>
 8003fc2:	2e0a      	cmp	r6, #10
 8003fc4:	d1df      	bne.n	8003f86 <__swbuf_r+0x2e>
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f7ff ff9d 	bl	8003f08 <_fflush_r>
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	d0d9      	beq.n	8003f86 <__swbuf_r+0x2e>
 8003fd2:	e7d6      	b.n	8003f82 <__swbuf_r+0x2a>

08003fd4 <__swsetup_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4b29      	ldr	r3, [pc, #164]	@ (800407c <__swsetup_r+0xa8>)
 8003fd8:	4605      	mov	r5, r0
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	460c      	mov	r4, r1
 8003fde:	b118      	cbz	r0, 8003fe8 <__swsetup_r+0x14>
 8003fe0:	6a03      	ldr	r3, [r0, #32]
 8003fe2:	b90b      	cbnz	r3, 8003fe8 <__swsetup_r+0x14>
 8003fe4:	f7ff fa3e 	bl	8003464 <__sinit>
 8003fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fec:	0719      	lsls	r1, r3, #28
 8003fee:	d422      	bmi.n	8004036 <__swsetup_r+0x62>
 8003ff0:	06da      	lsls	r2, r3, #27
 8003ff2:	d407      	bmi.n	8004004 <__swsetup_r+0x30>
 8003ff4:	2209      	movs	r2, #9
 8003ff6:	602a      	str	r2, [r5, #0]
 8003ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ffc:	81a3      	strh	r3, [r4, #12]
 8003ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8004002:	e033      	b.n	800406c <__swsetup_r+0x98>
 8004004:	0758      	lsls	r0, r3, #29
 8004006:	d512      	bpl.n	800402e <__swsetup_r+0x5a>
 8004008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800400a:	b141      	cbz	r1, 800401e <__swsetup_r+0x4a>
 800400c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004010:	4299      	cmp	r1, r3
 8004012:	d002      	beq.n	800401a <__swsetup_r+0x46>
 8004014:	4628      	mov	r0, r5
 8004016:	f7ff fb2d 	bl	8003674 <_free_r>
 800401a:	2300      	movs	r3, #0
 800401c:	6363      	str	r3, [r4, #52]	@ 0x34
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004024:	81a3      	strh	r3, [r4, #12]
 8004026:	2300      	movs	r3, #0
 8004028:	6063      	str	r3, [r4, #4]
 800402a:	6923      	ldr	r3, [r4, #16]
 800402c:	6023      	str	r3, [r4, #0]
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	f043 0308 	orr.w	r3, r3, #8
 8004034:	81a3      	strh	r3, [r4, #12]
 8004036:	6923      	ldr	r3, [r4, #16]
 8004038:	b94b      	cbnz	r3, 800404e <__swsetup_r+0x7a>
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004044:	d003      	beq.n	800404e <__swsetup_r+0x7a>
 8004046:	4621      	mov	r1, r4
 8004048:	4628      	mov	r0, r5
 800404a:	f000 f84f 	bl	80040ec <__smakebuf_r>
 800404e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004052:	f013 0201 	ands.w	r2, r3, #1
 8004056:	d00a      	beq.n	800406e <__swsetup_r+0x9a>
 8004058:	2200      	movs	r2, #0
 800405a:	60a2      	str	r2, [r4, #8]
 800405c:	6962      	ldr	r2, [r4, #20]
 800405e:	4252      	negs	r2, r2
 8004060:	61a2      	str	r2, [r4, #24]
 8004062:	6922      	ldr	r2, [r4, #16]
 8004064:	b942      	cbnz	r2, 8004078 <__swsetup_r+0xa4>
 8004066:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800406a:	d1c5      	bne.n	8003ff8 <__swsetup_r+0x24>
 800406c:	bd38      	pop	{r3, r4, r5, pc}
 800406e:	0799      	lsls	r1, r3, #30
 8004070:	bf58      	it	pl
 8004072:	6962      	ldrpl	r2, [r4, #20]
 8004074:	60a2      	str	r2, [r4, #8]
 8004076:	e7f4      	b.n	8004062 <__swsetup_r+0x8e>
 8004078:	2000      	movs	r0, #0
 800407a:	e7f7      	b.n	800406c <__swsetup_r+0x98>
 800407c:	20000018 	.word	0x20000018

08004080 <_sbrk_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4d06      	ldr	r5, [pc, #24]	@ (800409c <_sbrk_r+0x1c>)
 8004084:	2300      	movs	r3, #0
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fc fe44 	bl	8000d18 <_sbrk>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_sbrk_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_sbrk_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	20000260 	.word	0x20000260

080040a0 <__swhatbuf_r>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	460c      	mov	r4, r1
 80040a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a8:	2900      	cmp	r1, #0
 80040aa:	b096      	sub	sp, #88	@ 0x58
 80040ac:	4615      	mov	r5, r2
 80040ae:	461e      	mov	r6, r3
 80040b0:	da0d      	bge.n	80040ce <__swhatbuf_r+0x2e>
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80040b8:	f04f 0100 	mov.w	r1, #0
 80040bc:	bf14      	ite	ne
 80040be:	2340      	movne	r3, #64	@ 0x40
 80040c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80040c4:	2000      	movs	r0, #0
 80040c6:	6031      	str	r1, [r6, #0]
 80040c8:	602b      	str	r3, [r5, #0]
 80040ca:	b016      	add	sp, #88	@ 0x58
 80040cc:	bd70      	pop	{r4, r5, r6, pc}
 80040ce:	466a      	mov	r2, sp
 80040d0:	f000 f848 	bl	8004164 <_fstat_r>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	dbec      	blt.n	80040b2 <__swhatbuf_r+0x12>
 80040d8:	9901      	ldr	r1, [sp, #4]
 80040da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80040de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80040e2:	4259      	negs	r1, r3
 80040e4:	4159      	adcs	r1, r3
 80040e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040ea:	e7eb      	b.n	80040c4 <__swhatbuf_r+0x24>

080040ec <__smakebuf_r>:
 80040ec:	898b      	ldrh	r3, [r1, #12]
 80040ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040f0:	079d      	lsls	r5, r3, #30
 80040f2:	4606      	mov	r6, r0
 80040f4:	460c      	mov	r4, r1
 80040f6:	d507      	bpl.n	8004108 <__smakebuf_r+0x1c>
 80040f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	6123      	str	r3, [r4, #16]
 8004100:	2301      	movs	r3, #1
 8004102:	6163      	str	r3, [r4, #20]
 8004104:	b003      	add	sp, #12
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004108:	ab01      	add	r3, sp, #4
 800410a:	466a      	mov	r2, sp
 800410c:	f7ff ffc8 	bl	80040a0 <__swhatbuf_r>
 8004110:	9f00      	ldr	r7, [sp, #0]
 8004112:	4605      	mov	r5, r0
 8004114:	4639      	mov	r1, r7
 8004116:	4630      	mov	r0, r6
 8004118:	f7ff fb18 	bl	800374c <_malloc_r>
 800411c:	b948      	cbnz	r0, 8004132 <__smakebuf_r+0x46>
 800411e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004122:	059a      	lsls	r2, r3, #22
 8004124:	d4ee      	bmi.n	8004104 <__smakebuf_r+0x18>
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	f043 0302 	orr.w	r3, r3, #2
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	e7e2      	b.n	80040f8 <__smakebuf_r+0xc>
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	6020      	str	r0, [r4, #0]
 8004136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800413a:	81a3      	strh	r3, [r4, #12]
 800413c:	9b01      	ldr	r3, [sp, #4]
 800413e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004142:	b15b      	cbz	r3, 800415c <__smakebuf_r+0x70>
 8004144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004148:	4630      	mov	r0, r6
 800414a:	f000 f81d 	bl	8004188 <_isatty_r>
 800414e:	b128      	cbz	r0, 800415c <__smakebuf_r+0x70>
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	f023 0303 	bic.w	r3, r3, #3
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	81a3      	strh	r3, [r4, #12]
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	431d      	orrs	r5, r3
 8004160:	81a5      	strh	r5, [r4, #12]
 8004162:	e7cf      	b.n	8004104 <__smakebuf_r+0x18>

08004164 <_fstat_r>:
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	4d07      	ldr	r5, [pc, #28]	@ (8004184 <_fstat_r+0x20>)
 8004168:	2300      	movs	r3, #0
 800416a:	4604      	mov	r4, r0
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	f7fc fda8 	bl	8000cc6 <_fstat>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	d102      	bne.n	8004180 <_fstat_r+0x1c>
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	b103      	cbz	r3, 8004180 <_fstat_r+0x1c>
 800417e:	6023      	str	r3, [r4, #0]
 8004180:	bd38      	pop	{r3, r4, r5, pc}
 8004182:	bf00      	nop
 8004184:	20000260 	.word	0x20000260

08004188 <_isatty_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	4d06      	ldr	r5, [pc, #24]	@ (80041a4 <_isatty_r+0x1c>)
 800418c:	2300      	movs	r3, #0
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	f7fc fda7 	bl	8000ce6 <_isatty>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_isatty_r+0x1a>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_isatty_r+0x1a>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	20000260 	.word	0x20000260

080041a8 <_init>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr

080041b4 <_fini>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr
